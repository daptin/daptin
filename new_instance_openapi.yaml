openapi: 3.0.0
info:
  contact:
    email: artpar@gmail.com
    name: Daptin Support
    url: https://dapt.in
  description: "Daptin REST API server provides a complete backend with CRUD operations,
    authentication, authorization, and custom actions. This API follows JSON:API specification
    for resource representation.\n\n## \U0001F680 Getting Started with a Fresh Installation\n\n###
    Initial Setup Process:\n1. **Sign up** - Create first user account (public endpoint)\n2.
    **Sign in** - Get JWT token for authentication\n3. **Become Administrator** -
    CRITICAL: First user should immediately invoke 'become_an_administrator' action\n\n###
    ⚠️ IMPORTANT: Admin Bootstrapping Model\n- **Before first admin**: ALL users have
    full admin privileges by default\n- **After become_an_administrator**: Only that
    user has admin rights, all others become regular users\n- **This is a one-time
    action**: Once an admin is set, no other user can become admin\n- **Security Risk**:
    Until an admin is set, any user can access/modify anything\n\n## Key Features\n-
    **CRUD Operations**: Full Create, Read, Update, Delete operations on all entities\n-
    **Authentication**: JWT and Basic authentication support\n- **Authorization**:
    Role-based access control with Guest, User, and Group permissions\n- **Relationships**:
    Support for has_one, has_many, and many_to_many relationships\n- **Actions**:
    Custom actions on resources with input validation\n- **Pagination**: Offset and
    cursor-based pagination\n- **Filtering**: Advanced filtering with JSON-based queries\n-
    **Rate Limiting**: Built-in rate limiting per endpoint\n- **State Machines**:
    Workflow support with state transitions\n\n## Common Issues and Solutions\n- **\"min
    and 0 more errors\"**: Password must be at least 8 characters\n- **\"Decoding
    of secret as base32 failed\"**: Don't include mobile field unless SMS/OTP is configured\n-
    **\"required and 0 more errors\"**: Check that all required fields are provided
    (name, email, password, passwordConfirm)\n\n## Rate Limiting\nAll endpoints are
    rate-limited. Rate limit information is returned in response headers:\n- X-RateLimit-Limit:
    Maximum requests allowed\n- X-RateLimit-Remaining: Requests remaining\n- X-RateLimit-Reset:
    Unix timestamp when limit resets"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Daptin API endpoint
  version: 1.0.0
  x-logo:
    altText: Daptin Logo
    url: https://daptin.github.io/daptin/images/logo.png
  x-data-analytics-features:
    description: "## Data & Analytics Features\n\n### 1. Aggregation API\n- **Endpoint**: `/aggregate/{entityName}`\n- **Methods**: GET, POST\n- **Features**:\n  - Group by multiple columns\n  - Aggregate functions: count, sum, avg, min, max, first, last\n  - Filter syntax: functionName(leftValue, rightValue)\n  - Having clauses for grouped data\n  - Time-based sampling\n  - Join multiple tables\n  - Order results\n- **Example**: `/aggregate/world?group=is_hidden&column=is_hidden,count`\n\n### 2. GraphQL API\n- **Endpoint**: `/graphql`\n- **Enable**: Set config `graphql.enable` to true and restart\n- **Features**:\n  - Auto-generated schema from all tables\n  - Queries: list, single record, aggregations\n  - Mutations: create, update, delete\n  - Action execution via mutations\n  - Relationship traversal\n  - Pagination support\n- **Note**: Disabled by default for security\n\n### 3. Import/Export API\n- **Export Action**: `__data_export`\n  - Formats: JSON, CSV, XLSX, PDF, HTML\n  - Streaming for large datasets\n  - Column selection\n  - Pagination support\n- **Import Action**: `__data_import`\n  - Formats: JSON, CSV, XLSX\n  - Batch processing\n  - Truncate before insert option\n  - Auto-format detection\n- **Example**: `POST /api/{entity}/action/__data_export`\n\n### 4. Relationship Management\n- **Include Related Data**: `?include=relationship_name`\n- **Relationship Types**:\n  - belongs_to: Many-to-one\n  - has_one: One-to-one\n  - has_many: One-to-many\n  - many_to_many: Via join tables\n- **Features**:\n  - Automatic foreign key tracking\n  - Cascade operations\n  - Lazy/eager loading options"
servers:
- description: Server Parths-MacBook-Pro.local
  url: http://Parths-MacBook-Pro.local
paths:
  /aggregate/{entityName}:
    get:
      summary: Perform aggregation queries on entity data
      description: |
        Execute aggregation queries with grouping, filtering, and aggregate functions.
        
        ## Query Parameters:
        - **group**: Comma-separated list of columns to group by
        - **column**: Comma-separated list of columns/functions to select (e.g., "title,count(*)")
        - **filter**: Array of filter conditions using syntax: functionName(column,value)
        - **having**: Array of having conditions for grouped data
        - **join**: Array of join conditions for related tables
        - **order**: Array of ordering columns
        - **timesample**: Time sampling parameter
        - **timefrom**: Start time for time-based aggregations
        - **timeto**: End time for time-based aggregations
        
        ## Supported Functions:
        - count, count(*), sum(column), avg(column), min(column), max(column), first(column), last(column)
        
        ## Filter Functions:
        - eq(column,value), not(column,value), lt(column,value), lte(column,value)
        - gt(column,value), gte(column,value), in(column,value1,value2), notin(column,value1,value2)
        - is(column,null), not(column,null)
      operationId: performAggregation
      parameters:
      - name: entityName
        in: path
        required: true
        description: The entity/table name to aggregate
        schema:
          type: string
      - name: group
        in: query
        description: Columns to group by
        schema:
          type: array
          items:
            type: string
      - name: column
        in: query
        description: Columns and aggregate functions to select
        schema:
          type: array
          items:
            type: string
      - name: filter
        in: query
        description: Filter conditions
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: Aggregation results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: aggregate_entityname
                        id:
                          type: string
                        attributes:
                          type: object
                          additionalProperties: true
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
      security:
      - bearerAuth: []
      tags:
      - Analytics
    post:
      summary: Perform aggregation queries with JSON body
      description: Same as GET but with request body for complex queries
      operationId: performAggregationPost
      parameters:
      - name: entityName
        in: path
        required: true
        description: The entity/table name to aggregate
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                group:
                  type: array
                  items:
                    type: string
                column:
                  type: array
                  items:
                    type: string
                filter:
                  type: array
                  items:
                    type: string
                having:
                  type: array
                  items:
                    type: string
                join:
                  type: array
                  items:
                    type: string
                order:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Aggregation results
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      tags:
      - Analytics
  /action/action/get_action_schema:
    post:
      description: Get Action Schema
      operationId: ExecuteGetActionSchemaActionOnAction
      requestBody:
        content:
          application/json:
            example:
              action_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/GetActionSchemaOnActionRequestObject'
        description: Request body for Get Action Schema action
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Get Action Schema action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Get Action Schema action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Get Action Schema
      tags:
      - action
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/action/get_action_schema \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"action_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/action/get_action_schema', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"action_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/certificate/download_certificate:
    post:
      description: |-
        Downloads the SSL/TLS certificate in PEM format for a specific hostname. Returns the certificate file as a base64-encoded download.

        **Response Type:** client.file.download

        **File Format:** PEM certificate (.crt)

        **Common Use Cases:**
        - Backup SSL certificates
        - Certificate inspection and validation
        - Deployment to other systems
      operationId: ExecuteDownloadCertificateActionOnCertificate
      requestBody:
        content:
          application/json:
            example:
              certificate_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/DownloadCertificateOnCertificateRequestObject'
        description: Request body for Download certificate action
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      content: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZhekNDQTFPZ0F3SUJBZ0lVT...
                      contentType: application/x-x509-ca-cert
                      message: Certificate for example.com
                      name: example.com.pem.crt
                    ResponseType: client.file.download
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Download certificate action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Download certificate
      tags:
      - certificate
      - Certificate Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/certificate/download_certificate \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"certificate_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/certificate/download_certificate', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"certificate_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/certificate/download_public_key:
    post:
      description: Downloads the public key associated with a certificate. This action
        provides access to the public key component of SSL/TLS certificates for cryptographic
        operations or verification purposes.
      operationId: ExecuteDownloadPublicKeyActionOnCertificate
      requestBody:
        content:
          application/json:
            example:
              certificate_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/DownloadPublicKeyOnCertificateRequestObject'
        description: Request body for Download public key action
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Download public key action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Download public key action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Download public key
      tags:
      - certificate
      - Certificate Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/certificate/download_public_key \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"certificate_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/certificate/download_public_key', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"certificate_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/certificate/generate_acme_certificate:
    post:
      description: |-
        Generates a Let's Encrypt SSL/TLS certificate using the ACME protocol. Automatically handles domain validation and certificate issuance.

        **Prerequisites:**
        - Domain must be publicly accessible
        - Port 80 must be available for HTTP challenge
        - Valid email for notifications

        **Side Effects:**
        - Creates/updates certificate record
        - Configures HTTPS for the hostname
        - Stores certificate and private key

        **Rate Limits:** Let's Encrypt rate limits apply (5 certificates per domain per week)
      operationId: ExecuteGenerateAcmeCertificateActionOnCertificate
      requestBody:
        content:
          application/json:
            example:
              certificate_id: 550e8400-e29b-41d4-a716-446655440000
              email: admin@example.com
            schema:
              $ref: '#/components/schemas/GenerateAcmeCertificateOnCertificateRequestObject'
        description: Request body for Generate ACME certificate action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: Domain validation failed or rate limit exceeded
                      title: Certificate Generation Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Let's Encrypt certificate generated and installed
                      title: Certificate Generated
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Generate ACME certificate action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Generate ACME certificate
      tags:
      - certificate
      - Certificate Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/certificate/generate_acme_certificate \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"certificate_id":"550e8400-e29b-41d4-a716-446655440000","email":"admin@example.com"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/certificate/generate_acme_certificate', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"certificate_id":"550e8400-e29b-41d4-a716-446655440000","email":"admin@example.com"})
          });

          const result = await response.json();
          console.log(result);
  /action/certificate/generate_self_certificate:
    post:
      description: Generates a self-signed SSL/TLS certificate. Useful for development
        environments or internal services where a trusted certificate authority is
        not required.
      operationId: ExecuteGenerateSelfCertificateActionOnCertificate
      requestBody:
        content:
          application/json:
            example:
              certificate_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/GenerateSelfCertificateOnCertificateRequestObject'
        description: Request body for Generate Self certificate action
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Generate Self certificate action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Generate Self certificate action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Generate Self certificate
      tags:
      - certificate
      - Certificate Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/certificate/generate_self_certificate \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"certificate_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/certificate/generate_self_certificate', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"certificate_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/cloud_store/create_folder:
    post:
      description: Creates a new directory in cloud storage. Establishes folder structures
        for organizing files in external storage systems. Creates parent directories
        if needed.
      operationId: ExecuteCreateFolderActionOnCloudStore
      requestBody:
        content:
          application/json:
            example:
              cloud_store_id: 550e8400-e29b-41d4-a716-446655440000
              name: example name
              path: example path
            schema:
              $ref: '#/components/schemas/CreateFolderOnCloudStoreRequestObject'
        description: Request body for Create folder on a cloud store action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Create folder on a cloud store action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Create folder on a cloud store action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Create folder on a cloud store
      tags:
      - cloud_store
      - Storage Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/cloud_store/create_folder \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"cloud_store_id":"550e8400-e29b-41d4-a716-446655440000","name":"example name","path":"example path"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/cloud_store/create_folder', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"cloud_store_id":"550e8400-e29b-41d4-a716-446655440000","name":"example name","path":"example path"})
          });

          const result = await response.json();
          console.log(result);
  /action/cloud_store/create_site:
    post:
      description: |-
        Creates a new website/application site with hosting configuration.

        **Site Types:**
        - static - Plain HTML/CSS/JS
        - hugo - Hugo static site generator
        - jekyll - Jekyll static site generator

        **Auto-Configuration:**
        - Creates storage directories
        - Sets up routing rules
        - Configures SSL (if enabled)
        - Initializes site templates
      operationId: ExecuteCreateSiteActionOnCloudStore
      requestBody:
        content:
          application/json:
            example:
              cloud_store_id: 550e8400-e29b-41d4-a716-446655440000
              hostname: example hostname
              path: example path
              site_type: example site_type
            schema:
              $ref: '#/components/schemas/CreateSiteOnCloudStoreRequestObject'
        description: Request body for Create new site on this store action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: New site created at example.com
                      title: Site Created
                      type: success
                    ResponseType: client.notify
                  - Attributes:
                      delay: 2000
                      location: /sites
                    ResponseType: client.redirect
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Create new site on this store action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Create new site on this store
      tags:
      - cloud_store
      - Storage Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/cloud_store/create_site \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"cloud_store_id":"550e8400-e29b-41d4-a716-446655440000","hostname":"example hostname","path":"example path","site_type":"example site_type"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/cloud_store/create_site', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"cloud_store_id":"550e8400-e29b-41d4-a716-446655440000","hostname":"example hostname","path":"example path","site_type":"example site_type"})
          });

          const result = await response.json();
          console.log(result);
  /action/cloud_store/delete_path:
    post:
      description: Deletes a file or directory from cloud storage. Removes specified
        paths from the configured storage backend. Supports recursive deletion for
        directories.
      operationId: ExecuteDeletePathActionOnCloudStore
      requestBody:
        content:
          application/json:
            example:
              cloud_store_id: 550e8400-e29b-41d4-a716-446655440000
              path: example path
            schema:
              $ref: '#/components/schemas/DeletePathOnCloudStoreRequestObject'
        description: Request body for Delete path on a cloud store action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Delete path on a cloud store action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Delete path on a cloud store action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Delete path on a cloud store
      tags:
      - cloud_store
      - Storage Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/cloud_store/delete_path \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"cloud_store_id":"550e8400-e29b-41d4-a716-446655440000","path":"example path"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/cloud_store/delete_path', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"cloud_store_id":"550e8400-e29b-41d4-a716-446655440000","path":"example path"})
          });

          const result = await response.json();
          console.log(result);
  /action/cloud_store/move_path:
    post:
      description: Moves or renames files/folders in cloud storage. Relocates content
        within the storage system while preserving file integrity and metadata.
      operationId: ExecuteMovePathActionOnCloudStore
      requestBody:
        content:
          application/json:
            example:
              cloud_store_id: 550e8400-e29b-41d4-a716-446655440000
              destination: example destination
              source: example source
            schema:
              $ref: '#/components/schemas/MovePathOnCloudStoreRequestObject'
        description: Request body for Create folder on a cloud store action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Create folder on a cloud store action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Create folder on a cloud store action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Create folder on a cloud store
      tags:
      - cloud_store
      - Storage Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/cloud_store/move_path \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"cloud_store_id":"550e8400-e29b-41d4-a716-446655440000","destination":"example destination","source":"example source"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/cloud_store/move_path', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"cloud_store_id":"550e8400-e29b-41d4-a716-446655440000","destination":"example destination","source":"example source"})
          });

          const result = await response.json();
          console.log(result);
  /action/cloud_store/upload_file:
    post:
      description: |-
        Uploads a file to configured cloud storage with automatic path resolution.

        **File Handling:**
        - Automatic MIME type detection
        - Path sanitization
        - Overwrite protection (configurable)
        - Progress tracking for large files

        **Storage Providers:** AWS S3, Google Cloud Storage, Azure Blob, Local filesystem
      operationId: ExecuteUploadFileActionOnCloudStore
      requestBody:
        content:
          application/json:
            example:
              cloud_store_id: 550e8400-e29b-41d4-a716-446655440000
              file: example_value
              path: example path
            schema:
              $ref: '#/components/schemas/UploadFileOnCloudStoreRequestObject'
        description: Request body for Upload file to external store action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: File too large or invalid format
                      title: Upload Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: File uploaded successfully
                      title: Upload Complete
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Upload file to external store action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Upload file to external store
      tags:
      - cloud_store
      - Storage Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/cloud_store/upload_file \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"cloud_store_id":"550e8400-e29b-41d4-a716-446655440000","file":"example_value","path":"example path"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/cloud_store/upload_file', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"cloud_store_id":"550e8400-e29b-41d4-a716-446655440000","file":"example_value","path":"example path"})
          });

          const result = await response.json();
          console.log(result);
  /action/integration/install_integration:
    post:
      description: Installs and configures a third-party integration. This action
        sets up external service integrations, enabling Daptin to connect with various
        APIs, webhooks, and external systems.
      operationId: ExecuteInstallIntegrationActionOnIntegration
      requestBody:
        content:
          application/json:
            example:
              integration_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/InstallIntegrationOnIntegrationRequestObject'
        description: Request body for Install integration action
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Install integration action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Install integration action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Install integration
      tags:
      - integration
      - System Actions
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/integration/install_integration \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"integration_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/integration/install_integration', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"integration_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/mail_server/sync_mail_servers:
    post:
      description: |-
        Synchronizes email configurations with IMAP/SMTP servers. Fetches emails and updates mailbox state.

        **Supported Protocols:**
        - IMAP for receiving
        - SMTP for sending
        - OAuth2 authentication

        **Side Effects:**
        - Creates mail_box records for new emails
        - Updates sync timestamps
        - May trigger email processing workflows
      operationId: ExecuteSyncMailServersActionOnMailServer
      requestBody:
        content:
          application/json:
            example: {}
            schema:
              $ref: '#/components/schemas/SyncMailServersOnMailServerRequestObject'
        description: Request body for Sync Mail Servers action
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Sync Mail Servers action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Sync Mail Servers action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Sync Mail Servers
      tags:
      - mail_server
      - System Actions
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/mail_server/sync_mail_servers \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/mail_server/sync_mail_servers', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({})
          });

          const result = await response.json();
          console.log(result);
  /action/oauth_connect/oauth_login_begin:
    post:
      description: "Initiates OAuth authentication flow with supported providers.\n\n**Supported
        Providers:**\n- Google\n- Facebook  \n- GitHub\n- Microsoft\n- Custom OAuth2\n\n**Flow:**
        Redirects to provider → User authorizes → Callback to oauth.login.response"
      operationId: ExecuteOauthLoginBeginActionOnOauthConnect
      requestBody:
        content:
          application/json:
            example:
              oauth_connect_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/OauthLoginBeginOnOauthConnectRequestObject'
        description: Request body for Authenticate via OAuth action
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Authenticate via OAuth action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Authenticate via OAuth action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security: []
      summary: Authenticate via OAuth
      tags:
      - oauth_connect
      - User Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/oauth_connect/oauth_login_begin \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"oauth_connect_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/oauth_connect/oauth_login_begin', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"oauth_connect_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/oauth_token/oauth.login.response:
    post:
      description: Handles OAuth provider callback. Processes the OAuth response and
        creates/updates user account with provider data. Merges accounts if email
        matches.
      operationId: ExecuteOauthloginresponseActionOnOauthToken
      requestBody:
        content:
          application/json:
            example:
              authenticator: example_value
              code: example_value
              state: example_value
            schema:
              $ref: '#/components/schemas/OauthloginresponseOnOauthTokenRequestObject'
        description: Request body for Handle OAuth login response code and state action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Handle OAuth login response code and state action executed
                        successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Handle OAuth login response code and
            state action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security: []
      summary: Handle OAuth login response code and state
      tags:
      - oauth_token
      - User Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/oauth_token/oauth.login.response \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"authenticator":"example_value","code":"example_value","state":"example_value"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/oauth_token/oauth.login.response', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"authenticator":"example_value","code":"example_value","state":"example_value"})
          });

          const result = await response.json();
          console.log(result);
  /action/site/delete_file:
    post:
      description: Removes a specific file from site storage. Permanently deletes
        the specified file from the site's storage location. Cannot be undone.
      operationId: ExecuteDeleteFileActionOnSite
      requestBody:
        content:
          application/json:
            example:
              path: example path
              site_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/DeleteFileOnSiteRequestObject'
        description: Request body for Delete file in the site action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Delete file in the site action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Delete file in the site action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Delete file in the site
      tags:
      - site
      - Storage Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/site/delete_file \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"path":"example path","site_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/site/delete_file', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"path":"example path","site_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/site/get_file:
    post:
      description: Retrieves a specific file from site storage. Downloads file content
        for viewing or processing. Returns base64-encoded content for binary files.
      operationId: ExecuteGetFileActionOnSite
      requestBody:
        content:
          application/json:
            example:
              path: example path
              site_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/GetFileOnSiteRequestObject'
        description: Request body for Get file at the path in site action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Get file at the path in site action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Get file at the path in site action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Get file at the path in site
      tags:
      - site
      - Storage Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/site/get_file \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"path":"example path","site_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/site/get_file', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"path":"example path","site_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/site/list_files:
    post:
      description: |-
        Lists files and directories at a specified path with detailed metadata.

        **Response Format:**
        - File/directory names
        - Size in bytes
        - Last modified timestamp
        - MIME types
        - Directory indicators

        **Supports:** Pagination, sorting, filtering
      operationId: ExecuteListFilesActionOnSite
      requestBody:
        content:
          application/json:
            example:
              path: example path
              site_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/ListFilesOnSiteRequestObject'
        description: Request body for List files in the site path action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: List files in the site path action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of List files in the site path action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: List files in the site path
      tags:
      - site
      - Storage Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/site/list_files \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"path":"example path","site_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/site/list_files', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"path":"example path","site_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/site/sync_site_storage:
    post:
      description: "Synchronizes files between a site and its configured cloud storage
        using rclone. Performs bidirectional sync to ensure consistency.\n\n**Sync
        Direction:** Bidirectional (local ↔ cloud)\n\n**Performance:** May take time
        for large sites\n\n**Side Effects:**\n- Creates/updates/deletes files in cloud
        storage\n- Updates local file cache\n- Logs sync operations"
      operationId: ExecuteSyncSiteStorageActionOnSite
      requestBody:
        content:
          application/json:
            example:
              path: example path
              site_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/SyncSiteStorageOnSiteRequestObject'
        description: Request body for Sync site storage action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: 'Site storage synchronized: 15 files uploaded, 3 files
                        downloaded'
                      title: Sync Complete
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Sync site storage action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Sync site storage
      tags:
      - site
      - Storage Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/site/sync_site_storage \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"path":"example path","site_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/site/sync_site_storage', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"path":"example path","site_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/user_account/register_otp:
    post:
      description: |-
        Registers a mobile number for OTP-based authentication. Associates a phone number with the current user account for two-factor authentication.

        **SMS Provider Required:** Configured SMS gateway (Twilio, AWS SNS, etc.)

        **Validation:**
        - Mobile number format validation
        - Duplicate number check
        - User authentication required
      operationId: ExecuteRegisterOtpActionOnUserAccount
      requestBody:
        content:
          application/json:
            example:
              mobile_number: "+1234567890"
              user_account_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/RegisterOtpOnUserAccountRequestObject'
        description: Request body for Register Mobile Number action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Register Mobile Number action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Register Mobile Number action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Register Mobile Number
      tags:
      - user_account
      - User Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/user_account/register_otp \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"mobile_number":"+1234567890","user_account_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/user_account/register_otp', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"mobile_number":"+1234567890","user_account_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/user_account/reset-password:
    post:
      description: Initiates the password reset process. Sends a verification code
        to the user's registered email for password recovery. Codes expire after 15
        minutes.
      operationId: ExecuteResetPasswordActionOnUserAccount
      requestBody:
        content:
          application/json:
            example:
              email: user@example.com
            schema:
              $ref: '#/components/schemas/ResetPasswordOnUserAccountRequestObject'
        description: Request body for Reset password action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: If the email exists, a reset code has been sent
                      title: Email Sent
                      type: info
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Reset password action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security: []
      summary: Reset password
      tags:
      - user_account
      - User Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/user_account/reset-password \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"email":"user@example.com"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/user_account/reset-password', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"email":"user@example.com"})
          });

          const result = await response.json();
          console.log(result);
  /action/user_account/reset-password-verify:
    post:
      description: Completes password reset with verification code. Validates the
        reset code and sets a new password for the user account. Invalidates all existing
        sessions.
      operationId: ExecuteResetPasswordVerifyActionOnUserAccount
      requestBody:
        content:
          application/json:
            example:
              email: user@example.com
              otp: example_value
            schema:
              $ref: '#/components/schemas/ResetPasswordVerifyOnUserAccountRequestObject'
        description: Request body for Reset password verify code action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Reset password verify code action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Reset password verify code action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security: []
      summary: Reset password verify code
      tags:
      - user_account
      - User Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/user_account/reset-password-verify \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"email":"user@example.com","otp":"example_value"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/user_account/reset-password-verify', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"email":"user@example.com","otp":"example_value"})
          });

          const result = await response.json();
          console.log(result);
  /action/user_account/signin:
    post:
      description: |-
        Authenticates a user and returns JWT tokens for API access.

        **Prerequisites:**
        - User must exist (created via signup)
        - Account must not be locked
        - Email/password combination must be correct

        **Request Format:**
        - **email**: The email used during signup (case-insensitive)
        - **password**: The exact password (case-sensitive)

        **Response includes:**
        - **JWT Token**: Bearer token for API authentication
        - **Cookie**: Same token set as HTTP-only cookie
        - **Expiry**: Token valid for 3 days by default
        - **User Info**: Embedded in JWT claims (name, email, user ID)

        **How to use the token:**
        - Header: "Authorization: Bearer YOUR_JWT_TOKEN"
        - All subsequent API calls should include this header
        - Token contains user identity and permissions

        **Response Actions:**
        1. client.store.set - Stores token in browser localStorage
        2. client.cookie.set - Sets HTTP-only cookie
        3. client.notify - Shows success message
        4. client.redirect - Redirects to home after 2 seconds

        **Security Features:**
        - Passwords stored using bcrypt
        - Rate limiting on failed attempts
        - Account lockout after 5 failures
        - JWT includes issuer validation
      operationId: ExecuteSigninActionOnUserAccount
      requestBody:
        content:
          application/json:
            example:
              email: john.doe@example.com
              password: SecurePass123!
            schema:
              $ref: '#/components/schemas/SigninOnUserAccountRequestObject'
        description: Request body for Sign in action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: Invalid email or password
                      title: Authentication Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      key: token
                      value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20iLCJleHAiOjE3NTUwMjk5NTksImlhdCI6MTc1MTQzMzU1OSwibmFtZSI6IkpvaG4gRG9lIiwic3ViIjoiMDE5MjQyMTItZGQ5NC03N2QzLTkyMzMtYjJiYmM1ZmNiZDQ2In0...
                    ResponseType: client.store.set
                  - Attributes:
                      key: token
                      value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20iLCJleHAiOjE3NTUwMjk5NTksImlhdCI6MTc1MTQzMzU1OSwibmFtZSI6IkpvaG4gRG9lIiwic3ViIjoiMDE5MjQyMTItZGQ5NC03N2QzLTkyMzMtYjJiYmM1ZmNiZDQ2In0...;
                        SameSite=Strict
                    ResponseType: client.cookie.set
                  - Attributes:
                      message: Logged in
                      title: Success
                      type: success
                    ResponseType: client.notify
                  - Attributes:
                      delay: 2000
                      location: /
                      window: self
                    ResponseType: client.redirect
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Sign in action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security: []
      summary: Sign in
      tags:
      - user_account
      - User Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/user_account/signin \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"email":"john.doe@example.com","password":"SecurePass123!"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/user_account/signin', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"email":"john.doe@example.com","password":"SecurePass123!"})
          });

          const result = await response.json();
          console.log(result);
  /action/user_account/signup:
    post:
      description: "Creates a new user account with email/password authentication.\n\n**\U0001F3AF
        IMPORTANT FOR NEW INSTALLATIONS:**\n- If NO admin exists yet: New user will
        have FULL ADMIN privileges\n- If admin exists: New user will have standard
        permissions\n- First user should immediately invoke 'become_an_administrator'
        to secure the system\n\n**Validation Requirements:**\n- **Email**: Valid format,
        must be unique in system\n- **Password**: MINIMUM 8 CHARACTERS (required)\n-
        **Password Confirm**: Must exactly match password field\n- **Name**: Required
        field, will be trimmed of whitespace\n- **Mobile**: OPTIONAL - Leave empty
        if you don't have SMS/OTP configured\n\n**⚠️ COMMON ISSUES:**\n- \"min and
        0 more errors\" = Password less than 8 characters\n- \"Decoding of secret
        as base32 failed\" = OTP not configured, don't include mobile\n- \"required
        and 0 more errors\" = Name field is missing\n\n**Response:**\n- Success notification\n-
        Redirect to /auth/signin after 2 seconds\n- User account created but needs
        to sign in\n\n**Next Steps:**\n1. Sign in with the created credentials\n2.
        If first user, invoke 'become_an_administrator'\n3. Configure system settings
        as needed"
      operationId: ExecuteSignupActionOnUserAccount
      requestBody:
        content:
          application/json:
            example:
              email: john.doe@example.com
              mobile: "+1234567890"
              name: John Doe
              password: SecurePass123!
              passwordConfirm: SecurePass123!
            schema:
              $ref: '#/components/schemas/SignupOnUserAccountRequestObject'
        description: Request body for Sign up action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: Email already exists
                      title: Registration Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Sign-up successful. Redirecting to sign in
                      title: Success
                      type: success
                    ResponseType: client.notify
                  - Attributes:
                      delay: 2000
                      location: /auth/signin
                    ResponseType: client.redirect
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Sign up action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security: []
      summary: Sign up
      tags:
      - user_account
      - User Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/user_account/signup \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"email":"john.doe@example.com","mobile":"+1234567890","name":"John Doe","password":"SecurePass123!","passwordConfirm":"SecurePass123!"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/user_account/signup', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"email":"john.doe@example.com","mobile":"+1234567890","name":"John Doe","password":"SecurePass123!","passwordConfirm":"SecurePass123!"})
          });

          const result = await response.json();
          console.log(result);
  /action/user_account/verify_otp:
    post:
      description: |-
        Verifies an OTP code for authentication. Validates the one-time password and returns authentication tokens.

        **Response Types:**
        - client.token.set - JWT token for authentication
        - client.cookie.set - HTTP cookie with token
        - client.notify - Success/failure notification
        - client.redirect - Redirect after successful login

        **OTP Expiry:** Codes expire after 5 minutes
      operationId: ExecuteVerifyOtpActionOnUserAccount
      requestBody:
        content:
          application/json:
            example:
              email: user@example.com
              mobile_number: "+1234567890"
              otp: "123456"
            schema:
              $ref: '#/components/schemas/VerifyOtpOnUserAccountRequestObject'
        description: Request body for Login with OTP action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: Invalid or expired OTP
                      title: Verification Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      key: token
                      value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    ResponseType: client.store.set
                  - Attributes:
                      message: OTP verification successful
                      title: Verified
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Login with OTP action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Login with OTP
      tags:
      - user_account
      - User Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/user_account/verify_otp \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"email":"user@example.com","mobile_number":"+1234567890","otp":"123456"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/user_account/verify_otp', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"email":"user@example.com","mobile_number":"+1234567890","otp":"123456"})
          });

          const result = await response.json();
          console.log(result);
  /action/user_otp_account/send_otp:
    post:
      description: Sends a one-time password to a registered mobile number or email.
        Use this action to trigger OTP delivery for authentication or verification
        purposes.
      operationId: ExecuteSendOtpActionOnUserOtpAccount
      requestBody:
        content:
          application/json:
            example:
              email: example email
              mobile_number: example mobile_number
            schema:
              $ref: '#/components/schemas/SendOtpOnUserOtpAccountRequestObject'
        description: Request body for Send OTP to mobile action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Send OTP to mobile action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Send OTP to mobile action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Send OTP to mobile
      tags:
      - user_otp_account
      - User Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/user_otp_account/send_otp \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"email":"example email","mobile_number":"example mobile_number"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/user_otp_account/send_otp', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"email":"example email","mobile_number":"example mobile_number"})
          });

          const result = await response.json();
          console.log(result);
  /action/user_otp_account/verify_mobile_number:
    post:
      description: Verify Mobile Number
      operationId: ExecuteVerifyMobileNumberActionOnUserOtpAccount
      requestBody:
        content:
          application/json:
            example:
              email: example email
              mobile_number: example mobile_number
              otp: example otp
            schema:
              $ref: '#/components/schemas/VerifyMobileNumberOnUserOtpAccountRequestObject'
        description: Request body for Verify Mobile Number action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Verify Mobile Number action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Verify Mobile Number action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Verify Mobile Number
      tags:
      - user_otp_account
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/user_otp_account/verify_mobile_number \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"email":"example email","mobile_number":"example mobile_number","otp":"example otp"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/user_otp_account/verify_mobile_number', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"email":"example email","mobile_number":"example mobile_number","otp":"example otp"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/add_exchange:
    post:
      description: |-
        Configures automated data synchronization with external services.

        **Exchange Types:**
        - Google Sheets sync
        - REST API webhooks
        - Database replication
        - File system sync

        **Sync Options:**
        - One-way or bidirectional
        - Scheduled or real-time
        - Conflict resolution rules
      operationId: ExecuteAddExchangeActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              app_key: example_value
              name: example name
              sheet_id: example_value
              world_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/AddExchangeOnWorldRequestObject'
        description: Request body for Add new data exchange action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Add new data exchange action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Add new data exchange action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Add new data exchange
      tags:
      - world
      - Data Operations
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/add_exchange \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"app_key":"example_value","name":"example name","sheet_id":"example_value","world_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/add_exchange', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"app_key":"example_value","name":"example name","sheet_id":"example_value","world_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/become_an_administrator:
    post:
      description: "Elevates the current user to become the sole system administrator.\n\n**\U0001F6A8
        CRITICAL BOOTSTRAPPING INFORMATION:**\n- **Before first admin is set**: ALL
        users have full admin privileges by default\n- **After this action**: Only
        the user who invoked this becomes admin, all other users lose admin rights\n-
        **This can only be done ONCE**: After an admin exists, no other user can become
        admin\n- **No going back**: Once set, the admin role cannot be transferred
        or revoked\n\n**⚠️ SECURITY IMPLICATIONS:**\n- First user to invoke this action
        becomes permanent admin\n- All other existing users immediately lose admin
        privileges\n- New users created after this will have standard permissions\n-
        System requires restart after admin is set\n\n**Prerequisites:**\n- Must be
        authenticated (have valid JWT token)\n- No administrator must exist in the
        system yet\n- Will fail if an admin already exists\n\n**Use Cases:**\n- Initial
        system setup after first user creation\n- Securing a fresh Daptin installation\n-
        Converting from development to production mode\n\n**Side Effects:**\n- System
        will restart automatically\n- All caches will be cleared\n- Other logged-in
        users will need to re-authenticate\n\n**Response:** Redirect to home page
        after 7 seconds"
      operationId: ExecuteBecomeAnAdministratorActionOnWorld
      requestBody:
        content:
          application/json:
            example: {}
            schema:
              $ref: '#/components/schemas/BecomeAnAdministratorOnWorldRequestObject'
        description: Request body for Become Daptin Administrator action
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: You are now an administrator
                      title: Congratulations
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Become Daptin Administrator action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Become Daptin Administrator
      tags:
      - world
      - System Actions
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/become_an_administrator \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/become_an_administrator', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({})
          });

          const result = await response.json();
          console.log(result);
  /action/world/download_system_schema:
    post:
      description: |-
        Downloads the complete system configuration including all tables, columns, actions, and relationships.

        **Export Contains:**
        - Table definitions
        - Column specifications
        - Relationships and foreign keys
        - Actions and workflows
        - Permission settings
        - State machines

        **Format:** JSON schema compatible with upload_system_schema
      operationId: ExecuteDownloadSystemSchemaActionOnWorld
      requestBody:
        content:
          application/json:
            example: {}
            schema:
              $ref: '#/components/schemas/DownloadSystemSchemaOnWorldRequestObject'
        description: Request body for Download system schema action
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      content: ewogICJUYWJsZXMiOiBbCiAgICB7CiAgICAgICJUYWJsZU5hbWUiOiAidXNlcl9hY2NvdW50IiwKICAgICAgIkNvbHVtbnMiOiBbLi4uXQogICAgfQogIF0KfQ==
                      contentType: application/json
                      message: System schema export
                      name: daptin_schema.json
                    ResponseType: client.file.download
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Download system schema action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Download system schema
      tags:
      - world
      - Schema Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/download_system_schema \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/download_system_schema', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({})
          });

          const result = await response.json();
          console.log(result);
  /action/world/export_csv_data:
    post:
      description: Exports table data specifically in CSV format. Optimized for spreadsheet
        applications and data analysis tools. Simpler alternative to export_data when
        only CSV is needed.
      operationId: ExecuteExportCsvDataActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              table_name: example table_name
            schema:
              $ref: '#/components/schemas/ExportCsvDataOnWorldRequestObject'
        description: Request body for Export CSV data action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      content: aWQsbmFtZSxlbWFpbA0KMSxKb2huIERvZSxqb2huQGV4YW1wbGUuY29t
                      contentType: text/csv
                      message: CSV export completed
                      name: export.csv
                    ResponseType: client.file.download
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Export CSV data action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Export CSV data
      tags:
      - world
      - Data Operations
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/export_csv_data \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"table_name":"example table_name"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/export_csv_data', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"table_name":"example table_name"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/export_data:
    post:
      description: |-
        Exports table data with advanced options for filtering and formatting.

        **Supported Formats:**
        - JSON (default) - Complete data with relationships
        - CSV - Flat tabular format
        - XLSX - Excel with formatting
        - XML - Structured XML
        - PDF - Formatted reports
        - HTML - Web-viewable tables

        **Options:**
        - Column selection
        - Include/exclude headers
        - Custom page size
        - Filter expressions

        **Response:** Base64-encoded file download
      operationId: ExecuteExportDataActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              columns: name,email,created_at
              format: csv
              include_headers: true
              table_name: customers
            schema:
              $ref: '#/components/schemas/ExportDataOnWorldRequestObject'
        description: Request body for Export data for backup action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: Table not found or access denied
                      title: Export Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      content: aWQsbmFtZSxlbWFpbCxjcmVhdGVkX2F0CjEsSm9obiBEb2Usam9obkBleGFtcGxlLmNvbSwyMDI0LTAxLTE1CjIsSmFuZSBTbWl0aCxqYW5lQGV4YW1wbGUuY29tLDIwMjQtMDEtMTY=
                      contentType: text/csv
                      message: Downloading data as csv
                      name: daptin_export_customers.csv
                    ResponseType: client.file.download
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Export data for backup action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Export data for backup
      tags:
      - world
      - Data Operations
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/export_data \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"columns":"name,email,created_at","format":"csv","include_headers":true,"table_name":"customers"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/export_data', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"columns":"name,email,created_at","format":"csv","include_headers":true,"table_name":"customers"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/generate_random_data:
    post:
      description: |-
        Generates realistic test data for a specified table based on column types.

        **Data Generation:**
        - Names: Realistic person names
        - Emails: Valid format test emails
        - Dates: Random dates within reasonable ranges
        - Numbers: Random within column constraints
        - Text: Lorem ipsum style content

        **Batch Size:** Processes in batches of 100 records
      operationId: ExecuteGenerateRandomDataActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              count: 100
              table_name: test_users
            schema:
              $ref: '#/components/schemas/GenerateRandomDataOnWorldRequestObject'
        description: Request body for Generate random data action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: table not found
                      title: failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Created 100 rows in test_users
                      title: Success
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Generate random data action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Generate random data
      tags:
      - world
      - Data Operations
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/generate_random_data \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"count":100,"table_name":"test_users"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/generate_random_data', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"count":100,"table_name":"test_users"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/import_data:
    post:
      description: |-
        Imports data from uploaded files with automatic format detection and validation.

        **Supported Formats:**
        - JSON (including JSON arrays)
        - CSV (with header detection)
        - Excel (.xlsx, .xls)
        - YAML
        - TOML
        - HCL

        **Options:**
        - truncate_before_insert: Clear existing data
        - batch_size: Processing chunk size

        **Validation:**
        - Column type checking
        - Constraint validation
        - Foreign key verification
      operationId: ExecuteImportDataActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              batch_size: 10
              dump_file: example_value
              truncate_before_insert: true
              world_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/ImportDataOnWorldRequestObject'
        description: Request body for Import data from dump action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Import data from dump action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Import data from dump action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Import data from dump
      tags:
      - world
      - Data Operations
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/import_data \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"batch_size":10,"dump_file":"example_value","truncate_before_insert":true,"world_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/import_data', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"batch_size":10,"dump_file":"example_value","truncate_before_insert":true,"world_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/import_files_from_store:
    post:
      description: |-
        Imports file metadata from cloud storage into a specified database table. This action scans the configured cloud storage path and creates database records for each file found, storing the file path and metadata.

        **Side Effects:**
        - Creates new records in the target table
        - Each record contains file metadata in a JSON field
        - Does not copy actual file content, only references

        **Required Permissions:** Execute permission on world table

        **Common Errors:**
        - "invalid table" - Target table doesn't exist
        - Cloud storage not configured properly
        - Insufficient permissions on target table
      operationId: ExecuteImportFilesFromStoreActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              table_name: documents
              world_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/ImportFilesFromStoreOnWorldRequestObject'
        description: Request body for Import files data to a table action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: invalid table
                      title: Import Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Imported success 25 files, failed 0 files
                      title: Import Complete
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Import files data to a table action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Import files data to a table
      tags:
      - world
      - Data Operations
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/import_files_from_store \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"table_name":"documents","world_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/import_files_from_store', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"table_name":"documents","world_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/remove_column:
    post:
      description: "Permanently removes a column from a database table. This is a
        destructive DDL operation that cannot be undone.\n\n**⚠️ WARNING:** All data
        in the column will be permanently deleted!\n\n**Side Effects:**\n- Executes
        ALTER TABLE DROP COLUMN\n- Updates world schema metadata\n- Triggers system
        reload (if configured)\n\n**Validation:**\n- Column must exist\n- Cannot remove
        system columns\n- Checks for dependent relationships"
      operationId: ExecuteRemoveColumnActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              column_name: deprecated_field
              world_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/RemoveColumnOnWorldRequestObject'
        description: Request body for Delete column action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: no such column
                      title: Error
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Column deleted
                      title: Success
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Delete column action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Delete column
      tags:
      - world
      - Schema Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/remove_column \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"column_name":"deprecated_field","world_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/remove_column', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"column_name":"deprecated_field","world_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/remove_table:
    post:
      description: "Permanently deletes an entire database table and all its data.
        This is an irreversible destructive operation.\n\n**⚠️ CRITICAL WARNING:**
        \n- All table data will be permanently lost\n- All relationships will be broken\n-
        All associated actions will be deleted\n- Cannot be undone!\n\n**Required:**
        Administrator privileges"
      operationId: ExecuteRemoveTableActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              world_id: 550e8400-e29b-41d4-a716-446655440000
            schema:
              $ref: '#/components/schemas/RemoveTableOnWorldRequestObject'
        description: Request body for Delete table action
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Delete table action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Delete table action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Delete table
      tags:
      - world
      - Schema Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/remove_table \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"world_id":"550e8400-e29b-41d4-a716-446655440000"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/remove_table', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"world_id":"550e8400-e29b-41d4-a716-446655440000"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/rename_column:
    post:
      description: |-
        Renames a column in a database table while preserving all data.

        **Side Effects:**
        - Executes ALTER TABLE RENAME COLUMN
        - Updates world schema metadata
        - Updates all references in the system

        **Validation:**
        - New name cannot be a reserved word
        - Column must exist
        - New name must be unique in table
        - Spaces converted to underscores
      operationId: ExecuteRenameColumnActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              column_name: product_desc
              new_column_name: product_description
              table_name: products
            schema:
              $ref: '#/components/schemas/RenameColumnOnWorldRequestObject'
        description: Request body for Rename column action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: new_column_name is a reserved word
                      title: Error
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Column renamed
                      title: Success
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Rename column action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Rename column
      tags:
      - world
      - Schema Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/rename_column \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"column_name":"product_desc","new_column_name":"product_description","table_name":"products"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/rename_column', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"column_name":"product_desc","new_column_name":"product_description","table_name":"products"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/restart_daptin:
    post:
      description: |-
        Initiates a graceful system restart. Returns success immediately but actual restart happens asynchronously.

        **Response Types:**
        - client.notify - "Initiating system update"
        - client.redirect - Redirects to home after 5 seconds

        **Note:** The actual restart is handled by the process manager (systemd, Docker, etc.)
      operationId: ExecuteRestartDaptinActionOnWorld
      requestBody:
        content:
          application/json:
            example: {}
            schema:
              $ref: '#/components/schemas/RestartDaptinOnWorldRequestObject'
        description: Request body for Restart system action
        required: false
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Initiating system update.
                      title: Success
                      type: success
                    ResponseType: client.notify
                  - Attributes:
                      delay: 5000
                      location: /
                      window: self
                    ResponseType: client.redirect
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Restart system action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Restart system
      tags:
      - world
      - System Actions
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/restart_daptin \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/restart_daptin', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({})
          });

          const result = await response.json();
          console.log(result);
  /action/world/sync_column_storage:
    post:
      description: Synchronizes file-type column data with external cloud storage.
        Ensures that files referenced in database columns are properly stored in the
        configured cloud storage backend.
      operationId: ExecuteSyncColumnStorageActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              column_name: example column_name
              credential_name: example credential_name
              table_name: example table_name
            schema:
              $ref: '#/components/schemas/SyncColumnStorageOnWorldRequestObject'
        description: Request body for Sync column storage action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Sync column storage action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Sync column storage action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Sync column storage
      tags:
      - world
      - Storage Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/sync_column_storage \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"column_name":"example column_name","credential_name":"example credential_name","table_name":"example table_name"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/sync_column_storage', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"column_name":"example column_name","credential_name":"example credential_name","table_name":"example table_name"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/upload_csv_to_system_schema:
    post:
      description: |-
        Imports CSV data with intelligent parsing and schema creation.

        **CSV Parsing:**
        - Auto-detect delimiter
        - Header detection
        - Quote handling
        - Encoding detection

        **Data Types:** Automatically inferred from content analysis
      operationId: ExecuteUploadCsvToSystemSchemaActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              add_missing_columns: true
              create_if_not_exists: true
              data_csv_file: example_value
              entity_name: example entity_name
            schema:
              $ref: '#/components/schemas/UploadCsvToSystemSchemaOnWorldRequestObject'
        description: Request body for Upload CSV to entity action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Upload CSV to entity action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Upload CSV to entity action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Upload CSV to entity
      tags:
      - world
      - Data Operations
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/upload_csv_to_system_schema \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"add_missing_columns":true,"create_if_not_exists":true,"data_csv_file":"example_value","entity_name":"example entity_name"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/upload_csv_to_system_schema', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"add_missing_columns":true,"create_if_not_exists":true,"data_csv_file":"example_value","entity_name":"example entity_name"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/upload_system_schema:
    post:
      description: "Uploads and applies a new system configuration schema. Supports
        incremental updates and full replacements.\n\n**Supported Formats:**\n- JSON
        schema files\n- YAML configurations\n- SQL schema dumps\n\n**Validation:**\n-
        Schema syntax checking\n- Compatibility verification\n- Relationship validation\n\n**⚠️
        Caution:** Can significantly modify system behavior"
      operationId: ExecuteUploadSystemSchemaActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              schema_file: example_value
            schema:
              $ref: '#/components/schemas/UploadSystemSchemaOnWorldRequestObject'
        description: Request body for Upload features action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Upload features action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Upload features action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Upload features
      tags:
      - world
      - Schema Management
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/upload_system_schema \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"schema_file":"example_value"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/upload_system_schema', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"schema_file":"example_value"})
          });

          const result = await response.json();
          console.log(result);
  /action/world/upload_xls_to_system_schema:
    post:
      description: |-
        Imports Excel data with automatic schema detection and table creation.

        **Smart Detection:**
        - Column types from data
        - Header row identification
        - Sheet selection
        - Data type inference

        **Options:**
        - Create new table
        - Update existing table
        - Merge with existing data
      operationId: ExecuteUploadXlsToSystemSchemaActionOnWorld
      requestBody:
        content:
          application/json:
            example:
              add_missing_columns: true
              create_if_not_exists: true
              data_xls_file: example_value
              entity_name: example entity_name
            schema:
              $ref: '#/components/schemas/UploadXlsToSystemSchemaOnWorldRequestObject'
        description: Request body for Upload xls to entity action
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                error:
                  summary: Common error response
                  value:
                  - Attributes:
                      message: An error occurred while executing the action
                      title: Action Failed
                      type: error
                    ResponseType: client.notify
                success:
                  summary: Successful execution
                  value:
                  - Attributes:
                      message: Upload xls to entity action executed successfully
                      title: Action Completed
                      type: success
                    ResponseType: client.notify
              schema:
                description: Array of action responses, each representing an outcome
                  of the action
                items:
                  $ref: '#/components/schemas/ActionResponse'
                type: array
          description: Successful execution of Upload xls to entity action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      security:
      - bearerAuth: []
      summary: Upload xls to entity
      tags:
      - world
      - Data Operations
      x-codeSamples:
      - lang: curl
        source: |-
          curl -X POST \\
            https://your-daptin-instance.com/action/world/upload_xls_to_system_schema \\
            -H 'Authorization: Bearer YOUR_JWT_TOKEN' \\
            -H 'Content-Type: application/json' \\
            -d '{"add_missing_columns":true,"create_if_not_exists":true,"data_xls_file":"example_value","entity_name":"example entity_name"}'
      - lang: javascript
        source: |-
          const response = await fetch('https://your-daptin-instance.com/action/world/upload_xls_to_system_schema', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer YOUR_JWT_TOKEN',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({"add_missing_columns":true,"create_if_not_exists":true,"data_xls_file":"example_value","entity_name":"example entity_name"})
          });

          const result = await response.json();
          console.log(result);
  /api/action:
    get:
      description: Returns a list of Action
      operationId: GetAction
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Action'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all action
      tags:
      - action
      - find
      - get
    post:
      operationId: CreateAction
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  action_name: Example Label
                  label: Example Label
                type: action
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewAction'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - action
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: action to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Action'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: action response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new action
      tags:
      - action
      - create
  /api/action/{referenceId}:
    delete:
      description: Delete a action
      operationId: DeleteAction
      parameters:
      - description: Reference Id of the action
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete action
      tags:
      - action
      - delete
    get:
      description: Get action by id
      operationId: GetActionByReferenceId
      parameters:
      - description: Reference Id of the action
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
          description: get action by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get action by id
      tags:
      - action
    patch:
      description: Edit an existing action
      operationId: UpdateAction
      parameters:
      - description: Reference Id of the action
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Action'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Action'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          world_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated action
      summary: Update existing action
      tags:
      - action
  /api/action/{referenceId}/user_account:
    delete:
      description: Remove a related action from the user_account_id
      operationId: DeleteUserAccountIdOfAction
      parameters:
      - description: Reference Id of the action
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of action
      tags:
      - user_account_id
      - action
      - action_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a action
      operationId: GetUserAccountIdOfActionId
      parameters:
      - description: Reference Id of the action
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of action
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related action from the user_account_id
      operationId: PatchUserAccountIdOfAction
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of action
      tags:
      - user_account_id
      - action
      - action_id
      - user_account
      - belongs_to
      - patch
  /api/action/{referenceId}/usergroup:
    delete:
      description: Remove a related action from the usergroup_id
      operationId: DeleteUsergroupIdOfAction
      parameters:
      - description: Reference Id of the action
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of action
      tags:
      - usergroup_id
      - action
      - action_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a action
      operationId: GetUsergroupIdOfActionId
      parameters:
      - description: Reference Id of the action
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of action
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related action from the usergroup_id
      operationId: PatchUsergroupIdOfAction
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of action
      tags:
      - usergroup_id
      - action
      - action_id
      - usergroup
      - has_many
      - patch
  /api/action/{referenceId}/world:
    delete:
      description: Remove a related action from the world_id
      operationId: DeleteWorldIdOfAction
      parameters:
      - description: Reference Id of the action
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: world
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation world
      summary: Delete related world_id of action
      tags:
      - world_id
      - action
      - action_id
      - world
      - belongs_to
      - delete
    get:
      description: Returns a list of all World related to a action
      operationId: GetWorldIdOfActionId
      parameters:
      - description: Reference Id of the action
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/World'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all world
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related world_id of action
      tags:
      - world
      - find
      - get
    patch:
      description: Add a related action from the world_id
      operationId: PatchWorldIdOfAction
      parameters:
      - description: Reference Id of the world
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: world
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation world
      summary: Add related world_id of action
      tags:
      - world_id
      - action
      - action_id
      - world
      - belongs_to
      - patch
  /api/calendar:
    get:
      description: Returns a list of Calendar
      operationId: GetCalendar
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Calendar'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all calendar
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all calendar
      tags:
      - calendar
      - find
      - get
    post:
      operationId: CreateCalendar
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  rpath: Example Label
                type: calendar
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewCalendar'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - calendar
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: calendar to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Calendar'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: calendar response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new calendar
      tags:
      - calendar
      - create
  /api/calendar/{referenceId}:
    delete:
      description: Delete a calendar
      operationId: DeleteCalendar
      parameters:
      - description: Reference Id of the calendar
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete calendar
      tags:
      - calendar
      - delete
    get:
      description: Get calendar by id
      operationId: GetCalendarByReferenceId
      parameters:
      - description: Reference Id of the calendar
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar'
          description: get calendar by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get calendar by id
      tags:
      - calendar
    patch:
      description: Edit an existing calendar
      operationId: UpdateCalendar
      parameters:
      - description: Reference Id of the calendar
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Calendar'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Calendar'
                      id:
                        type: string
                      relationships:
                        properties:
                          collection_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated calendar
      summary: Update existing calendar
      tags:
      - calendar
  /api/calendar/{referenceId}/collection:
    delete:
      description: Remove a related calendar from the collection_id
      operationId: DeleteCollectionIdOfCalendar
      parameters:
      - description: Reference Id of the calendar
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: collection
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation collection
      summary: Delete related collection_id of calendar
      tags:
      - collection_id
      - calendar
      - calendar_id
      - collection
      - has_one
      - delete
    get:
      description: Returns a list of all Collection related to a calendar
      operationId: GetCollectionIdOfCalendarId
      parameters:
      - description: Reference Id of the calendar
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Collection'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all collection
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related collection_id of calendar
      tags:
      - collection
      - find
      - get
    patch:
      description: Add a related calendar from the collection_id
      operationId: PatchCollectionIdOfCalendar
      parameters:
      - description: Reference Id of the collection
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: collection
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation collection
      summary: Add related collection_id of calendar
      tags:
      - collection_id
      - calendar
      - calendar_id
      - collection
      - has_one
      - patch
  /api/calendar/{referenceId}/user_account:
    delete:
      description: Remove a related calendar from the user_account_id
      operationId: DeleteUserAccountIdOfCalendar
      parameters:
      - description: Reference Id of the calendar
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of calendar
      tags:
      - user_account_id
      - calendar
      - calendar_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a calendar
      operationId: GetUserAccountIdOfCalendarId
      parameters:
      - description: Reference Id of the calendar
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of calendar
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related calendar from the user_account_id
      operationId: PatchUserAccountIdOfCalendar
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of calendar
      tags:
      - user_account_id
      - calendar
      - calendar_id
      - user_account
      - belongs_to
      - patch
  /api/calendar/{referenceId}/usergroup:
    delete:
      description: Remove a related calendar from the usergroup_id
      operationId: DeleteUsergroupIdOfCalendar
      parameters:
      - description: Reference Id of the calendar
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of calendar
      tags:
      - usergroup_id
      - calendar
      - calendar_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a calendar
      operationId: GetUsergroupIdOfCalendarId
      parameters:
      - description: Reference Id of the calendar
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of calendar
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related calendar from the usergroup_id
      operationId: PatchUsergroupIdOfCalendar
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of calendar
      tags:
      - usergroup_id
      - calendar
      - calendar_id
      - usergroup
      - has_many
      - patch
  /api/certificate:
    get:
      description: Returns a list of Certificate
      operationId: GetCertificate
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Certificate'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all certificate
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all certificate
      tags:
      - certificate
      - find
      - get
    post:
      operationId: CreateCertificate
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  generated_at: 2024-01-15T09:30:00Z
                  hostname: Example Label
                  issuer: Example Label
                type: certificate
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewCertificate'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - certificate
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: certificate to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Certificate'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: certificate response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new certificate
      tags:
      - certificate
      - create
  /api/certificate/{referenceId}:
    delete:
      description: Delete a certificate
      operationId: DeleteCertificate
      parameters:
      - description: Reference Id of the certificate
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete certificate
      tags:
      - certificate
      - delete
    get:
      description: Get certificate by id
      operationId: GetCertificateByReferenceId
      parameters:
      - description: Reference Id of the certificate
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: get certificate by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get certificate by id
      tags:
      - certificate
    patch:
      description: Edit an existing certificate
      operationId: UpdateCertificate
      parameters:
      - description: Reference Id of the certificate
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Certificate'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Certificate'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated certificate
      summary: Update existing certificate
      tags:
      - certificate
  /api/certificate/{referenceId}/user_account:
    delete:
      description: Remove a related certificate from the user_account_id
      operationId: DeleteUserAccountIdOfCertificate
      parameters:
      - description: Reference Id of the certificate
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of certificate
      tags:
      - user_account_id
      - certificate
      - certificate_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a certificate
      operationId: GetUserAccountIdOfCertificateId
      parameters:
      - description: Reference Id of the certificate
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of certificate
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related certificate from the user_account_id
      operationId: PatchUserAccountIdOfCertificate
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of certificate
      tags:
      - user_account_id
      - certificate
      - certificate_id
      - user_account
      - belongs_to
      - patch
  /api/certificate/{referenceId}/usergroup:
    delete:
      description: Remove a related certificate from the usergroup_id
      operationId: DeleteUsergroupIdOfCertificate
      parameters:
      - description: Reference Id of the certificate
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of certificate
      tags:
      - usergroup_id
      - certificate
      - certificate_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a certificate
      operationId: GetUsergroupIdOfCertificateId
      parameters:
      - description: Reference Id of the certificate
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of certificate
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related certificate from the usergroup_id
      operationId: PatchUsergroupIdOfCertificate
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of certificate
      tags:
      - usergroup_id
      - certificate
      - certificate_id
      - usergroup
      - has_many
      - patch
  /api/cloud_store:
    get:
      description: Returns a list of Cloud store
      operationId: GetCloudStore
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CloudStore'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all cloud_store
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all cloud_store
      tags:
      - cloud_store
      - find
      - get
    post:
      operationId: CreateCloudStore
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  credential_name: Example Label
                  name: Example Label
                  root_path: Example Label
                  store_provider: Example Label
                  store_type: Example Label
                type: cloud_store
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewCloudStore'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - cloud_store
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: cloud_store to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/CloudStore'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: cloud_store response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new cloud_store
      tags:
      - cloud_store
      - create
  /api/cloud_store/{referenceId}:
    delete:
      description: Delete a cloud_store
      operationId: DeleteCloudStore
      parameters:
      - description: Reference Id of the cloud_store
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete cloud_store
      tags:
      - cloud_store
      - delete
    get:
      description: Get cloud_store by id
      operationId: GetCloudStoreByReferenceId
      parameters:
      - description: Reference Id of the cloud_store
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudStore'
          description: get cloud_store by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get cloud_store by id
      tags:
      - cloud_store
    patch:
      description: Edit an existing cloud_store
      operationId: UpdateCloudStore
      parameters:
      - description: Reference Id of the cloud_store
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/CloudStore'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/CloudStore'
                      id:
                        type: string
                      relationships:
                        properties:
                          credential_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated cloud_store
      summary: Update existing cloud_store
      tags:
      - cloud_store
  /api/cloud_store/{referenceId}/credential:
    delete:
      description: Remove a related cloud_store from the credential_id
      operationId: DeleteCredentialIdOfCloudStore
      parameters:
      - description: Reference Id of the cloud_store
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: credential
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation credential
      summary: Delete related credential_id of cloud_store
      tags:
      - credential_id
      - cloud_store
      - cloud_store_id
      - credential
      - has_one
      - delete
    get:
      description: Returns a list of all Credential related to a cloud_store
      operationId: GetCredentialIdOfCloudStoreId
      parameters:
      - description: Reference Id of the cloud_store
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Credential'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all credential
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related credential_id of cloud_store
      tags:
      - credential
      - find
      - get
    patch:
      description: Add a related cloud_store from the credential_id
      operationId: PatchCredentialIdOfCloudStore
      parameters:
      - description: Reference Id of the credential
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: credential
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation credential
      summary: Add related credential_id of cloud_store
      tags:
      - credential_id
      - cloud_store
      - cloud_store_id
      - credential
      - has_one
      - patch
  /api/cloud_store/{referenceId}/user_account:
    delete:
      description: Remove a related cloud_store from the user_account_id
      operationId: DeleteUserAccountIdOfCloudStore
      parameters:
      - description: Reference Id of the cloud_store
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of cloud_store
      tags:
      - user_account_id
      - cloud_store
      - cloud_store_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a cloud_store
      operationId: GetUserAccountIdOfCloudStoreId
      parameters:
      - description: Reference Id of the cloud_store
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of cloud_store
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related cloud_store from the user_account_id
      operationId: PatchUserAccountIdOfCloudStore
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of cloud_store
      tags:
      - user_account_id
      - cloud_store
      - cloud_store_id
      - user_account
      - belongs_to
      - patch
  /api/cloud_store/{referenceId}/usergroup:
    delete:
      description: Remove a related cloud_store from the usergroup_id
      operationId: DeleteUsergroupIdOfCloudStore
      parameters:
      - description: Reference Id of the cloud_store
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of cloud_store
      tags:
      - usergroup_id
      - cloud_store
      - cloud_store_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a cloud_store
      operationId: GetUsergroupIdOfCloudStoreId
      parameters:
      - description: Reference Id of the cloud_store
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of cloud_store
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related cloud_store from the usergroup_id
      operationId: PatchUsergroupIdOfCloudStore
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of cloud_store
      tags:
      - usergroup_id
      - cloud_store
      - cloud_store_id
      - usergroup
      - has_many
      - patch
  /api/collection:
    get:
      description: Returns a list of Collection
      operationId: GetCollection
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Collection'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all collection
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all collection
      tags:
      - collection
      - find
      - get
    post:
      operationId: CreateCollection
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  description: Example Label
                  name: Example Label
                type: collection
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewCollection'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - collection
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: collection to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Collection'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: collection response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new collection
      tags:
      - collection
      - create
  /api/collection/{referenceId}:
    delete:
      description: Delete a collection
      operationId: DeleteCollection
      parameters:
      - description: Reference Id of the collection
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete collection
      tags:
      - collection
      - delete
    get:
      description: Get collection by id
      operationId: GetCollectionByReferenceId
      parameters:
      - description: Reference Id of the collection
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: get collection by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get collection by id
      tags:
      - collection
    patch:
      description: Edit an existing collection
      operationId: UpdateCollection
      parameters:
      - description: Reference Id of the collection
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Collection'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Collection'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated collection
      summary: Update existing collection
      tags:
      - collection
  /api/collection/{referenceId}/user_account:
    delete:
      description: Remove a related collection from the user_account_id
      operationId: DeleteUserAccountIdOfCollection
      parameters:
      - description: Reference Id of the collection
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of collection
      tags:
      - user_account_id
      - collection
      - collection_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a collection
      operationId: GetUserAccountIdOfCollectionId
      parameters:
      - description: Reference Id of the collection
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of collection
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related collection from the user_account_id
      operationId: PatchUserAccountIdOfCollection
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of collection
      tags:
      - user_account_id
      - collection
      - collection_id
      - user_account
      - belongs_to
      - patch
  /api/collection/{referenceId}/usergroup:
    delete:
      description: Remove a related collection from the usergroup_id
      operationId: DeleteUsergroupIdOfCollection
      parameters:
      - description: Reference Id of the collection
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of collection
      tags:
      - usergroup_id
      - collection
      - collection_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a collection
      operationId: GetUsergroupIdOfCollectionId
      parameters:
      - description: Reference Id of the collection
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of collection
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related collection from the usergroup_id
      operationId: PatchUsergroupIdOfCollection
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of collection
      tags:
      - usergroup_id
      - collection
      - collection_id
      - usergroup
      - has_many
      - patch
  /api/credential:
    get:
      description: Returns a list of Credential
      operationId: GetCredential
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Credential'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all credential
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all credential
      tags:
      - credential
      - find
      - get
    post:
      operationId: CreateCredential
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  name: Example Label
                type: credential
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewCredential'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - credential
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: credential to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Credential'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: credential response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new credential
      tags:
      - credential
      - create
  /api/credential/{referenceId}:
    delete:
      description: Delete a credential
      operationId: DeleteCredential
      parameters:
      - description: Reference Id of the credential
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete credential
      tags:
      - credential
      - delete
    get:
      description: Get credential by id
      operationId: GetCredentialByReferenceId
      parameters:
      - description: Reference Id of the credential
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: get credential by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get credential by id
      tags:
      - credential
    patch:
      description: Edit an existing credential
      operationId: UpdateCredential
      parameters:
      - description: Reference Id of the credential
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Credential'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Credential'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated credential
      summary: Update existing credential
      tags:
      - credential
  /api/credential/{referenceId}/user_account:
    delete:
      description: Remove a related credential from the user_account_id
      operationId: DeleteUserAccountIdOfCredential
      parameters:
      - description: Reference Id of the credential
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of credential
      tags:
      - user_account_id
      - credential
      - credential_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a credential
      operationId: GetUserAccountIdOfCredentialId
      parameters:
      - description: Reference Id of the credential
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of credential
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related credential from the user_account_id
      operationId: PatchUserAccountIdOfCredential
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of credential
      tags:
      - user_account_id
      - credential
      - credential_id
      - user_account
      - belongs_to
      - patch
  /api/credential/{referenceId}/usergroup:
    delete:
      description: Remove a related credential from the usergroup_id
      operationId: DeleteUsergroupIdOfCredential
      parameters:
      - description: Reference Id of the credential
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of credential
      tags:
      - usergroup_id
      - credential
      - credential_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a credential
      operationId: GetUsergroupIdOfCredentialId
      parameters:
      - description: Reference Id of the credential
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of credential
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related credential from the usergroup_id
      operationId: PatchUsergroupIdOfCredential
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of credential
      tags:
      - usergroup_id
      - credential
      - credential_id
      - usergroup
      - has_many
      - patch
  /api/data_exchange:
    get:
      description: Returns a list of Data exchange
      operationId: GetDataExchange
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/DataExchange'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all data_exchange
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all data_exchange
      tags:
      - data_exchange
      - find
      - get
    post:
      operationId: CreateDataExchange
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  name: Example Label
                  source_type: Example Label
                  target_type: Example Label
                type: data_exchange
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewDataExchange'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - data_exchange
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: data_exchange to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/DataExchange'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: data_exchange response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new data_exchange
      tags:
      - data_exchange
      - create
  /api/data_exchange/{referenceId}:
    delete:
      description: Delete a data_exchange
      operationId: DeleteDataExchange
      parameters:
      - description: Reference Id of the data_exchange
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete data_exchange
      tags:
      - data_exchange
      - delete
    get:
      description: Get data_exchange by id
      operationId: GetDataExchangeByReferenceId
      parameters:
      - description: Reference Id of the data_exchange
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataExchange'
          description: get data_exchange by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get data_exchange by id
      tags:
      - data_exchange
    patch:
      description: Edit an existing data_exchange
      operationId: UpdateDataExchange
      parameters:
      - description: Reference Id of the data_exchange
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/DataExchange'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/DataExchange'
                      id:
                        type: string
                      relationships:
                        properties:
                          as_user_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          oauth_token_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated data_exchange
      summary: Update existing data_exchange
      tags:
      - data_exchange
  /api/data_exchange/{referenceId}/oauth_token:
    delete:
      description: Remove a related data_exchange from the oauth_token_id
      operationId: DeleteOauthTokenIdOfDataExchange
      parameters:
      - description: Reference Id of the data_exchange
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: oauth_token
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation oauth_token
      summary: Delete related oauth_token_id of data_exchange
      tags:
      - oauth_token_id
      - data_exchange
      - data_exchange_id
      - oauth_token
      - has_one
      - delete
    get:
      description: Returns a list of all Oauth token related to a data_exchange
      operationId: GetOauthTokenIdOfDataExchangeId
      parameters:
      - description: Reference Id of the data_exchange
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/OauthToken'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all oauth_token
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related oauth_token_id of data_exchange
      tags:
      - oauth_token
      - find
      - get
    patch:
      description: Add a related data_exchange from the oauth_token_id
      operationId: PatchOauthTokenIdOfDataExchange
      parameters:
      - description: Reference Id of the oauth_token
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: oauth_token
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation oauth_token
      summary: Add related oauth_token_id of data_exchange
      tags:
      - oauth_token_id
      - data_exchange
      - data_exchange_id
      - oauth_token
      - has_one
      - patch
  /api/data_exchange/{referenceId}/user_account:
    delete:
      description: Remove a related data_exchange from the as_user_id
      operationId: DeleteAsUserIdOfDataExchange
      parameters:
      - description: Reference Id of the data_exchange
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related as_user_id of data_exchange
      tags:
      - as_user_id
      - data_exchange
      - user_data_exchange
      - user_account
      - has_one
      - delete
    get:
      description: Returns a list of all User account related to a data_exchange
      operationId: GetAsUserIdOfUserDataExchange
      parameters:
      - description: Reference Id of the data_exchange
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related as_user_id of data_exchange
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related data_exchange from the as_user_id
      operationId: PatchAsUserIdOfDataExchange
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related as_user_id of data_exchange
      tags:
      - as_user_id
      - data_exchange
      - user_data_exchange
      - user_account
      - has_one
      - patch
  /api/data_exchange/{referenceId}/usergroup:
    delete:
      description: Remove a related data_exchange from the usergroup_id
      operationId: DeleteUsergroupIdOfDataExchange
      parameters:
      - description: Reference Id of the data_exchange
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of data_exchange
      tags:
      - usergroup_id
      - data_exchange
      - data_exchange_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a data_exchange
      operationId: GetUsergroupIdOfDataExchangeId
      parameters:
      - description: Reference Id of the data_exchange
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of data_exchange
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related data_exchange from the usergroup_id
      operationId: PatchUsergroupIdOfDataExchange
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of data_exchange
      tags:
      - usergroup_id
      - data_exchange
      - data_exchange_id
      - usergroup
      - has_many
      - patch
  /api/document:
    get:
      description: Returns a list of Document
      operationId: GetDocument
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Document'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all document
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all document
      tags:
      - document
      - find
      - get
    post:
      operationId: CreateDocument
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  document_extension: Example Label
                  document_name: Example Label
                  document_path: Example Label
                  mime_type: Example Label
                type: document
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewDocument'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - document
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: document to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Document'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: document response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new document
      tags:
      - document
      - create
  /api/document/{referenceId}:
    delete:
      description: Delete a document
      operationId: DeleteDocument
      parameters:
      - description: Reference Id of the document
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete document
      tags:
      - document
      - delete
    get:
      description: Get document by id
      operationId: GetDocumentByReferenceId
      parameters:
      - description: Reference Id of the document
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: get document by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get document by id
      tags:
      - document
    patch:
      description: Edit an existing document
      operationId: UpdateDocument
      parameters:
      - description: Reference Id of the document
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Document'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Document'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated document
      summary: Update existing document
      tags:
      - document
  /api/document/{referenceId}/user_account:
    delete:
      description: Remove a related document from the user_account_id
      operationId: DeleteUserAccountIdOfDocument
      parameters:
      - description: Reference Id of the document
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of document
      tags:
      - user_account_id
      - document
      - document_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a document
      operationId: GetUserAccountIdOfDocumentId
      parameters:
      - description: Reference Id of the document
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of document
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related document from the user_account_id
      operationId: PatchUserAccountIdOfDocument
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of document
      tags:
      - user_account_id
      - document
      - document_id
      - user_account
      - belongs_to
      - patch
  /api/document/{referenceId}/usergroup:
    delete:
      description: Remove a related document from the usergroup_id
      operationId: DeleteUsergroupIdOfDocument
      parameters:
      - description: Reference Id of the document
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of document
      tags:
      - usergroup_id
      - document
      - document_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a document
      operationId: GetUsergroupIdOfDocumentId
      parameters:
      - description: Reference Id of the document
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of document
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related document from the usergroup_id
      operationId: PatchUsergroupIdOfDocument
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of document
      tags:
      - usergroup_id
      - document
      - document_id
      - usergroup
      - has_many
      - patch
  /api/feed:
    get:
      description: Returns a list of Feed
      operationId: GetFeed
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Feed'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all feed
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all feed
      tags:
      - feed
      - find
      - get
    post:
      operationId: CreateFeed
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  author_email: Example Label
                  author_name: Example Label
                  description: Example Label
                  feed_name: Example Label
                  link: Example Label
                  title: Example Label
                type: feed
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewFeed'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - feed
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: feed to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Feed'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: feed response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new feed
      tags:
      - feed
      - create
  /api/feed/{referenceId}:
    delete:
      description: Delete a feed
      operationId: DeleteFeed
      parameters:
      - description: Reference Id of the feed
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete feed
      tags:
      - feed
      - delete
    get:
      description: Get feed by id
      operationId: GetFeedByReferenceId
      parameters:
      - description: Reference Id of the feed
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
          description: get feed by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get feed by id
      tags:
      - feed
    patch:
      description: Edit an existing feed
      operationId: UpdateFeed
      parameters:
      - description: Reference Id of the feed
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Feed'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Feed'
                      id:
                        type: string
                      relationships:
                        properties:
                          stream_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated feed
      summary: Update existing feed
      tags:
      - feed
  /api/feed/{referenceId}/stream:
    delete:
      description: Remove a related feed from the stream_id
      operationId: DeleteStreamIdOfFeed
      parameters:
      - description: Reference Id of the feed
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: stream
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation stream
      summary: Delete related stream_id of feed
      tags:
      - stream_id
      - feed
      - feed_id
      - stream
      - belongs_to
      - delete
    get:
      description: Returns a list of all Stream related to a feed
      operationId: GetStreamIdOfFeedId
      parameters:
      - description: Reference Id of the feed
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Stream'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all stream
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related stream_id of feed
      tags:
      - stream
      - find
      - get
    patch:
      description: Add a related feed from the stream_id
      operationId: PatchStreamIdOfFeed
      parameters:
      - description: Reference Id of the stream
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: stream
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation stream
      summary: Add related stream_id of feed
      tags:
      - stream_id
      - feed
      - feed_id
      - stream
      - belongs_to
      - patch
  /api/feed/{referenceId}/user_account:
    delete:
      description: Remove a related feed from the user_account_id
      operationId: DeleteUserAccountIdOfFeed
      parameters:
      - description: Reference Id of the feed
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of feed
      tags:
      - user_account_id
      - feed
      - feed_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a feed
      operationId: GetUserAccountIdOfFeedId
      parameters:
      - description: Reference Id of the feed
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of feed
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related feed from the user_account_id
      operationId: PatchUserAccountIdOfFeed
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of feed
      tags:
      - user_account_id
      - feed
      - feed_id
      - user_account
      - belongs_to
      - patch
  /api/feed/{referenceId}/usergroup:
    delete:
      description: Remove a related feed from the usergroup_id
      operationId: DeleteUsergroupIdOfFeed
      parameters:
      - description: Reference Id of the feed
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of feed
      tags:
      - usergroup_id
      - feed
      - feed_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a feed
      operationId: GetUsergroupIdOfFeedId
      parameters:
      - description: Reference Id of the feed
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of feed
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related feed from the usergroup_id
      operationId: PatchUsergroupIdOfFeed
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of feed
      tags:
      - usergroup_id
      - feed
      - feed_id
      - usergroup
      - has_many
      - patch
  /api/integration:
    get:
      description: Returns a list of Integration
      operationId: GetIntegration
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Integration'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all integration
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all integration
      tags:
      - integration
      - find
      - get
    post:
      operationId: CreateIntegration
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  authentication_type: Example Label
                  name: Example Label
                  specification_format: Example Label
                  specification_language: Example Label
                type: integration
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewIntegration'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - integration
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: integration to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Integration'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: integration response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new integration
      tags:
      - integration
      - create
  /api/integration/{referenceId}:
    delete:
      description: Delete a integration
      operationId: DeleteIntegration
      parameters:
      - description: Reference Id of the integration
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete integration
      tags:
      - integration
      - delete
    get:
      description: Get integration by id
      operationId: GetIntegrationByReferenceId
      parameters:
      - description: Reference Id of the integration
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
          description: get integration by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get integration by id
      tags:
      - integration
    patch:
      description: Edit an existing integration
      operationId: UpdateIntegration
      parameters:
      - description: Reference Id of the integration
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Integration'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Integration'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated integration
      summary: Update existing integration
      tags:
      - integration
  /api/integration/{referenceId}/user_account:
    delete:
      description: Remove a related integration from the user_account_id
      operationId: DeleteUserAccountIdOfIntegration
      parameters:
      - description: Reference Id of the integration
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of integration
      tags:
      - user_account_id
      - integration
      - integration_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a integration
      operationId: GetUserAccountIdOfIntegrationId
      parameters:
      - description: Reference Id of the integration
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of integration
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related integration from the user_account_id
      operationId: PatchUserAccountIdOfIntegration
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of integration
      tags:
      - user_account_id
      - integration
      - integration_id
      - user_account
      - belongs_to
      - patch
  /api/integration/{referenceId}/usergroup:
    delete:
      description: Remove a related integration from the usergroup_id
      operationId: DeleteUsergroupIdOfIntegration
      parameters:
      - description: Reference Id of the integration
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of integration
      tags:
      - usergroup_id
      - integration
      - integration_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a integration
      operationId: GetUsergroupIdOfIntegrationId
      parameters:
      - description: Reference Id of the integration
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of integration
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related integration from the usergroup_id
      operationId: PatchUsergroupIdOfIntegration
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of integration
      tags:
      - usergroup_id
      - integration
      - integration_id
      - usergroup
      - has_many
      - patch
  /api/json_schema:
    get:
      description: Returns a list of Json schema
      operationId: GetJsonSchema
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/JsonSchema'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all json_schema
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all json_schema
      tags:
      - json_schema
      - find
      - get
    post:
      operationId: CreateJsonSchema
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  schema_name: Example Label
                type: json_schema
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewJsonSchema'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - json_schema
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: json_schema to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/JsonSchema'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: json_schema response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new json_schema
      tags:
      - json_schema
      - create
  /api/json_schema/{referenceId}:
    delete:
      description: Delete a json_schema
      operationId: DeleteJsonSchema
      parameters:
      - description: Reference Id of the json_schema
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete json_schema
      tags:
      - json_schema
      - delete
    get:
      description: Get json_schema by id
      operationId: GetJsonSchemaByReferenceId
      parameters:
      - description: Reference Id of the json_schema
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
          description: get json_schema by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get json_schema by id
      tags:
      - json_schema
    patch:
      description: Edit an existing json_schema
      operationId: UpdateJsonSchema
      parameters:
      - description: Reference Id of the json_schema
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/JsonSchema'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/JsonSchema'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated json_schema
      summary: Update existing json_schema
      tags:
      - json_schema
  /api/json_schema/{referenceId}/user_account:
    delete:
      description: Remove a related json_schema from the user_account_id
      operationId: DeleteUserAccountIdOfJsonSchema
      parameters:
      - description: Reference Id of the json_schema
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of json_schema
      tags:
      - user_account_id
      - json_schema
      - json_schema_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a json_schema
      operationId: GetUserAccountIdOfJsonSchemaId
      parameters:
      - description: Reference Id of the json_schema
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of json_schema
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related json_schema from the user_account_id
      operationId: PatchUserAccountIdOfJsonSchema
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of json_schema
      tags:
      - user_account_id
      - json_schema
      - json_schema_id
      - user_account
      - belongs_to
      - patch
  /api/json_schema/{referenceId}/usergroup:
    delete:
      description: Remove a related json_schema from the usergroup_id
      operationId: DeleteUsergroupIdOfJsonSchema
      parameters:
      - description: Reference Id of the json_schema
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of json_schema
      tags:
      - usergroup_id
      - json_schema
      - json_schema_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a json_schema
      operationId: GetUsergroupIdOfJsonSchemaId
      parameters:
      - description: Reference Id of the json_schema
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of json_schema
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related json_schema from the usergroup_id
      operationId: PatchUsergroupIdOfJsonSchema
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of json_schema
      tags:
      - usergroup_id
      - json_schema
      - json_schema_id
      - usergroup
      - has_many
      - patch
  /api/mail:
    get:
      description: Returns a list of Mail
      operationId: GetMail
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Mail'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all mail
      tags:
      - mail
      - find
      - get
    post:
      operationId: CreateMail
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  body: Example Label
                  flags: Example Label
                  from_address: Example Label
                  hash: Example Label
                  internal_date: 2024-01-15T09:30:00Z
                  ip_addr: Example Label
                  mail_id: Example Label
                  message_id: Example Label
                  recipient: Example Label
                  reply_to_address: Example Label
                  sender_address: Example Label
                  subject: Example Label
                  to_address: Example Label
                type: mail
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewMail'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - mail
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: mail to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Mail'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: mail response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new mail
      tags:
      - mail
      - create
  /api/mail/{referenceId}:
    delete:
      description: Delete a mail
      operationId: DeleteMail
      parameters:
      - description: Reference Id of the mail
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete mail
      tags:
      - mail
      - delete
    get:
      description: Get mail by id
      operationId: GetMailByReferenceId
      parameters:
      - description: Reference Id of the mail
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mail'
          description: get mail by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get mail by id
      tags:
      - mail
    patch:
      description: Edit an existing mail
      operationId: UpdateMail
      parameters:
      - description: Reference Id of the mail
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Mail'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Mail'
                      id:
                        type: string
                      relationships:
                        properties:
                          mail_box_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated mail
      summary: Update existing mail
      tags:
      - mail
  /api/mail/{referenceId}/mail_box:
    delete:
      description: Remove a related mail from the mail_box_id
      operationId: DeleteMailBoxIdOfMail
      parameters:
      - description: Reference Id of the mail
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: mail_box
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation mail_box
      summary: Delete related mail_box_id of mail
      tags:
      - mail_box_id
      - mail
      - mail_id
      - mail_box
      - belongs_to
      - delete
    get:
      description: Returns a list of all Mail box related to a mail
      operationId: GetMailBoxIdOfMailId
      parameters:
      - description: Reference Id of the mail
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailBox'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_box
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related mail_box_id of mail
      tags:
      - mail_box
      - find
      - get
    patch:
      description: Add a related mail from the mail_box_id
      operationId: PatchMailBoxIdOfMail
      parameters:
      - description: Reference Id of the mail_box
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: mail_box
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation mail_box
      summary: Add related mail_box_id of mail
      tags:
      - mail_box_id
      - mail
      - mail_id
      - mail_box
      - belongs_to
      - patch
  /api/mail/{referenceId}/user_account:
    delete:
      description: Remove a related mail from the user_account_id
      operationId: DeleteUserAccountIdOfMail
      parameters:
      - description: Reference Id of the mail
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of mail
      tags:
      - user_account_id
      - mail
      - mail_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a mail
      operationId: GetUserAccountIdOfMailId
      parameters:
      - description: Reference Id of the mail
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of mail
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related mail from the user_account_id
      operationId: PatchUserAccountIdOfMail
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of mail
      tags:
      - user_account_id
      - mail
      - mail_id
      - user_account
      - belongs_to
      - patch
  /api/mail/{referenceId}/usergroup:
    delete:
      description: Remove a related mail from the usergroup_id
      operationId: DeleteUsergroupIdOfMail
      parameters:
      - description: Reference Id of the mail
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of mail
      tags:
      - usergroup_id
      - mail
      - mail_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a mail
      operationId: GetUsergroupIdOfMailId
      parameters:
      - description: Reference Id of the mail
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of mail
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related mail from the usergroup_id
      operationId: PatchUsergroupIdOfMail
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of mail
      tags:
      - usergroup_id
      - mail
      - mail_id
      - usergroup
      - has_many
      - patch
  /api/mail_account:
    get:
      description: Returns a list of Mail account
      operationId: GetMailAccount
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all mail_account
      tags:
      - mail_account
      - find
      - get
    post:
      operationId: CreateMailAccount
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  username: Example Label
                type: mail_account
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewMailAccount'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - mail_account
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: mail_account to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/MailAccount'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: mail_account response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new mail_account
      tags:
      - mail_account
      - create
  /api/mail_account/{referenceId}:
    delete:
      description: Delete a mail_account
      operationId: DeleteMailAccount
      parameters:
      - description: Reference Id of the mail_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete mail_account
      tags:
      - mail_account
      - delete
    get:
      description: Get mail_account by id
      operationId: GetMailAccountByReferenceId
      parameters:
      - description: Reference Id of the mail_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailAccount'
          description: get mail_account by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get mail_account by id
      tags:
      - mail_account
    patch:
      description: Edit an existing mail_account
      operationId: UpdateMailAccount
      parameters:
      - description: Reference Id of the mail_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/MailAccount'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/MailAccount'
                      id:
                        type: string
                      relationships:
                        properties:
                          mail_server_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated mail_account
      summary: Update existing mail_account
      tags:
      - mail_account
  /api/mail_account/{referenceId}/mail_server:
    delete:
      description: Remove a related mail_account from the mail_server_id
      operationId: DeleteMailServerIdOfMailAccount
      parameters:
      - description: Reference Id of the mail_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: mail_server
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation mail_server
      summary: Delete related mail_server_id of mail_account
      tags:
      - mail_server_id
      - mail_account
      - mail_account_id
      - mail_server
      - belongs_to
      - delete
    get:
      description: Returns a list of all Mail server related to a mail_account
      operationId: GetMailServerIdOfMailAccountId
      parameters:
      - description: Reference Id of the mail_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailServer'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_server
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related mail_server_id of mail_account
      tags:
      - mail_server
      - find
      - get
    patch:
      description: Add a related mail_account from the mail_server_id
      operationId: PatchMailServerIdOfMailAccount
      parameters:
      - description: Reference Id of the mail_server
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: mail_server
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation mail_server
      summary: Add related mail_server_id of mail_account
      tags:
      - mail_server_id
      - mail_account
      - mail_account_id
      - mail_server
      - belongs_to
      - patch
  /api/mail_account/{referenceId}/user_account:
    delete:
      description: Remove a related mail_account from the user_account_id
      operationId: DeleteUserAccountIdOfMailAccount
      parameters:
      - description: Reference Id of the mail_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of mail_account
      tags:
      - user_account_id
      - mail_account
      - mail_account_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a mail_account
      operationId: GetUserAccountIdOfMailAccountId
      parameters:
      - description: Reference Id of the mail_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of mail_account
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related mail_account from the user_account_id
      operationId: PatchUserAccountIdOfMailAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of mail_account
      tags:
      - user_account_id
      - mail_account
      - mail_account_id
      - user_account
      - belongs_to
      - patch
  /api/mail_account/{referenceId}/usergroup:
    delete:
      description: Remove a related mail_account from the usergroup_id
      operationId: DeleteUsergroupIdOfMailAccount
      parameters:
      - description: Reference Id of the mail_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of mail_account
      tags:
      - usergroup_id
      - mail_account
      - mail_account_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a mail_account
      operationId: GetUsergroupIdOfMailAccountId
      parameters:
      - description: Reference Id of the mail_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of mail_account
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related mail_account from the usergroup_id
      operationId: PatchUsergroupIdOfMailAccount
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of mail_account
      tags:
      - usergroup_id
      - mail_account
      - mail_account_id
      - usergroup
      - has_many
      - patch
  /api/mail_box:
    get:
      description: Returns a list of Mail box
      operationId: GetMailBox
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailBox'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_box
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all mail_box
      tags:
      - mail_box
      - find
      - get
    post:
      operationId: CreateMailBox
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  attributes: Example Label
                  flags: Example Label
                  name: Example Label
                  permanent_flags: Example Label
                type: mail_box
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewMailBox'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - mail_box
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: mail_box to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/MailBox'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: mail_box response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new mail_box
      tags:
      - mail_box
      - create
  /api/mail_box/{referenceId}:
    delete:
      description: Delete a mail_box
      operationId: DeleteMailBox
      parameters:
      - description: Reference Id of the mail_box
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete mail_box
      tags:
      - mail_box
      - delete
    get:
      description: Get mail_box by id
      operationId: GetMailBoxByReferenceId
      parameters:
      - description: Reference Id of the mail_box
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailBox'
          description: get mail_box by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get mail_box by id
      tags:
      - mail_box
    patch:
      description: Edit an existing mail_box
      operationId: UpdateMailBox
      parameters:
      - description: Reference Id of the mail_box
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/MailBox'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/MailBox'
                      id:
                        type: string
                      relationships:
                        properties:
                          mail_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated mail_box
      summary: Update existing mail_box
      tags:
      - mail_box
  /api/mail_box/{referenceId}/mail_account:
    delete:
      description: Remove a related mail_box from the mail_account_id
      operationId: DeleteMailAccountIdOfMailBox
      parameters:
      - description: Reference Id of the mail_box
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: mail_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation mail_account
      summary: Delete related mail_account_id of mail_box
      tags:
      - mail_account_id
      - mail_box
      - mail_box_id
      - mail_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all Mail account related to a mail_box
      operationId: GetMailAccountIdOfMailBoxId
      parameters:
      - description: Reference Id of the mail_box
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related mail_account_id of mail_box
      tags:
      - mail_account
      - find
      - get
    patch:
      description: Add a related mail_box from the mail_account_id
      operationId: PatchMailAccountIdOfMailBox
      parameters:
      - description: Reference Id of the mail_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: mail_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation mail_account
      summary: Add related mail_account_id of mail_box
      tags:
      - mail_account_id
      - mail_box
      - mail_box_id
      - mail_account
      - belongs_to
      - patch
  /api/mail_box/{referenceId}/user_account:
    delete:
      description: Remove a related mail_box from the user_account_id
      operationId: DeleteUserAccountIdOfMailBox
      parameters:
      - description: Reference Id of the mail_box
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of mail_box
      tags:
      - user_account_id
      - mail_box
      - mail_box_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a mail_box
      operationId: GetUserAccountIdOfMailBoxId
      parameters:
      - description: Reference Id of the mail_box
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of mail_box
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related mail_box from the user_account_id
      operationId: PatchUserAccountIdOfMailBox
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of mail_box
      tags:
      - user_account_id
      - mail_box
      - mail_box_id
      - user_account
      - belongs_to
      - patch
  /api/mail_box/{referenceId}/usergroup:
    delete:
      description: Remove a related mail_box from the usergroup_id
      operationId: DeleteUsergroupIdOfMailBox
      parameters:
      - description: Reference Id of the mail_box
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of mail_box
      tags:
      - usergroup_id
      - mail_box
      - mail_box_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a mail_box
      operationId: GetUsergroupIdOfMailBoxId
      parameters:
      - description: Reference Id of the mail_box
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of mail_box
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related mail_box from the usergroup_id
      operationId: PatchUsergroupIdOfMailBox
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of mail_box
      tags:
      - usergroup_id
      - mail_box
      - mail_box_id
      - usergroup
      - has_many
      - patch
  /api/mail_server:
    get:
      description: Returns a list of Mail server
      operationId: GetMailServer
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailServer'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_server
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all mail_server
      tags:
      - mail_server
      - find
      - get
    post:
      operationId: CreateMailServer
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  hostname: Example Label
                  listen_interface: Example Label
                type: mail_server
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewMailServer'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - mail_server
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: mail_server to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/MailServer'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: mail_server response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new mail_server
      tags:
      - mail_server
      - create
  /api/mail_server/{referenceId}:
    delete:
      description: Delete a mail_server
      operationId: DeleteMailServer
      parameters:
      - description: Reference Id of the mail_server
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete mail_server
      tags:
      - mail_server
      - delete
    get:
      description: Get mail_server by id
      operationId: GetMailServerByReferenceId
      parameters:
      - description: Reference Id of the mail_server
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailServer'
          description: get mail_server by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get mail_server by id
      tags:
      - mail_server
    patch:
      description: Edit an existing mail_server
      operationId: UpdateMailServer
      parameters:
      - description: Reference Id of the mail_server
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/MailServer'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/MailServer'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated mail_server
      summary: Update existing mail_server
      tags:
      - mail_server
  /api/mail_server/{referenceId}/user_account:
    delete:
      description: Remove a related mail_server from the user_account_id
      operationId: DeleteUserAccountIdOfMailServer
      parameters:
      - description: Reference Id of the mail_server
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of mail_server
      tags:
      - user_account_id
      - mail_server
      - mail_server_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a mail_server
      operationId: GetUserAccountIdOfMailServerId
      parameters:
      - description: Reference Id of the mail_server
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of mail_server
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related mail_server from the user_account_id
      operationId: PatchUserAccountIdOfMailServer
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of mail_server
      tags:
      - user_account_id
      - mail_server
      - mail_server_id
      - user_account
      - belongs_to
      - patch
  /api/mail_server/{referenceId}/usergroup:
    delete:
      description: Remove a related mail_server from the usergroup_id
      operationId: DeleteUsergroupIdOfMailServer
      parameters:
      - description: Reference Id of the mail_server
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of mail_server
      tags:
      - usergroup_id
      - mail_server
      - mail_server_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a mail_server
      operationId: GetUsergroupIdOfMailServerId
      parameters:
      - description: Reference Id of the mail_server
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of mail_server
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related mail_server from the usergroup_id
      operationId: PatchUsergroupIdOfMailServer
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of mail_server
      tags:
      - usergroup_id
      - mail_server
      - mail_server_id
      - usergroup
      - has_many
      - patch
  /api/oauth_connect:
    get:
      description: Returns a list of Oauth connect
      operationId: GetOauthConnect
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/OauthConnect'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all oauth_connect
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all oauth_connect
      tags:
      - oauth_connect
      - find
      - get
    post:
      operationId: CreateOauthConnect
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  auth_url: https://example.com
                  client_id: Example Label
                  name: Example Label
                  profile_email_path: Example Label
                  profile_url: https://example.com
                  redirect_uri: https://example.com
                  response_type: Example Label
                  token_url: https://example.com
                type: oauth_connect
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewOauthConnect'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - oauth_connect
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: oauth_connect to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/OauthConnect'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: oauth_connect response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new oauth_connect
      tags:
      - oauth_connect
      - create
  /api/oauth_connect/{referenceId}:
    delete:
      description: Delete a oauth_connect
      operationId: DeleteOauthConnect
      parameters:
      - description: Reference Id of the oauth_connect
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete oauth_connect
      tags:
      - oauth_connect
      - delete
    get:
      description: Get oauth_connect by id
      operationId: GetOauthConnectByReferenceId
      parameters:
      - description: Reference Id of the oauth_connect
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthConnect'
          description: get oauth_connect by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get oauth_connect by id
      tags:
      - oauth_connect
    patch:
      description: Edit an existing oauth_connect
      operationId: UpdateOauthConnect
      parameters:
      - description: Reference Id of the oauth_connect
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/OauthConnect'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/OauthConnect'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated oauth_connect
      summary: Update existing oauth_connect
      tags:
      - oauth_connect
  /api/oauth_connect/{referenceId}/user_account:
    delete:
      description: Remove a related oauth_connect from the user_account_id
      operationId: DeleteUserAccountIdOfOauthConnect
      parameters:
      - description: Reference Id of the oauth_connect
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of oauth_connect
      tags:
      - user_account_id
      - oauth_connect
      - oauth_connect_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a oauth_connect
      operationId: GetUserAccountIdOfOauthConnectId
      parameters:
      - description: Reference Id of the oauth_connect
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of oauth_connect
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related oauth_connect from the user_account_id
      operationId: PatchUserAccountIdOfOauthConnect
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of oauth_connect
      tags:
      - user_account_id
      - oauth_connect
      - oauth_connect_id
      - user_account
      - belongs_to
      - patch
  /api/oauth_connect/{referenceId}/usergroup:
    delete:
      description: Remove a related oauth_connect from the usergroup_id
      operationId: DeleteUsergroupIdOfOauthConnect
      parameters:
      - description: Reference Id of the oauth_connect
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of oauth_connect
      tags:
      - usergroup_id
      - oauth_connect
      - oauth_connect_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a oauth_connect
      operationId: GetUsergroupIdOfOauthConnectId
      parameters:
      - description: Reference Id of the oauth_connect
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of oauth_connect
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related oauth_connect from the usergroup_id
      operationId: PatchUsergroupIdOfOauthConnect
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of oauth_connect
      tags:
      - usergroup_id
      - oauth_connect
      - oauth_connect_id
      - usergroup
      - has_many
      - patch
  /api/oauth_token:
    get:
      description: Returns a list of Oauth token
      operationId: GetOauthToken
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/OauthToken'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all oauth_token
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all oauth_token
      tags:
      - oauth_token
      - find
      - get
    post:
      operationId: CreateOauthToken
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  token_type: Example Label
                type: oauth_token
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewOauthToken'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - oauth_token
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: oauth_token to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/OauthToken'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: oauth_token response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new oauth_token
      tags:
      - oauth_token
      - create
  /api/oauth_token/{referenceId}:
    delete:
      description: Delete a oauth_token
      operationId: DeleteOauthToken
      parameters:
      - description: Reference Id of the oauth_token
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete oauth_token
      tags:
      - oauth_token
      - delete
    get:
      description: Get oauth_token by id
      operationId: GetOauthTokenByReferenceId
      parameters:
      - description: Reference Id of the oauth_token
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthToken'
          description: get oauth_token by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get oauth_token by id
      tags:
      - oauth_token
    patch:
      description: Edit an existing oauth_token
      operationId: UpdateOauthToken
      parameters:
      - description: Reference Id of the oauth_token
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/OauthToken'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/OauthToken'
                      id:
                        type: string
                      relationships:
                        properties:
                          oauth_connect_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated oauth_token
      summary: Update existing oauth_token
      tags:
      - oauth_token
  /api/oauth_token/{referenceId}/oauth_connect:
    delete:
      description: Remove a related oauth_token from the oauth_connect_id
      operationId: DeleteOauthConnectIdOfOauthToken
      parameters:
      - description: Reference Id of the oauth_token
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: oauth_connect
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation oauth_connect
      summary: Delete related oauth_connect_id of oauth_token
      tags:
      - oauth_connect_id
      - oauth_token
      - oauth_token_id
      - oauth_connect
      - has_one
      - delete
    get:
      description: Returns a list of all Oauth connect related to a oauth_token
      operationId: GetOauthConnectIdOfOauthTokenId
      parameters:
      - description: Reference Id of the oauth_token
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/OauthConnect'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all oauth_connect
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related oauth_connect_id of oauth_token
      tags:
      - oauth_connect
      - find
      - get
    patch:
      description: Add a related oauth_token from the oauth_connect_id
      operationId: PatchOauthConnectIdOfOauthToken
      parameters:
      - description: Reference Id of the oauth_connect
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: oauth_connect
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation oauth_connect
      summary: Add related oauth_connect_id of oauth_token
      tags:
      - oauth_connect_id
      - oauth_token
      - oauth_token_id
      - oauth_connect
      - has_one
      - patch
  /api/oauth_token/{referenceId}/user_account:
    delete:
      description: Remove a related oauth_token from the user_account_id
      operationId: DeleteUserAccountIdOfOauthToken
      parameters:
      - description: Reference Id of the oauth_token
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of oauth_token
      tags:
      - user_account_id
      - oauth_token
      - oauth_token_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a oauth_token
      operationId: GetUserAccountIdOfOauthTokenId
      parameters:
      - description: Reference Id of the oauth_token
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of oauth_token
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related oauth_token from the user_account_id
      operationId: PatchUserAccountIdOfOauthToken
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of oauth_token
      tags:
      - user_account_id
      - oauth_token
      - oauth_token_id
      - user_account
      - belongs_to
      - patch
  /api/oauth_token/{referenceId}/usergroup:
    delete:
      description: Remove a related oauth_token from the usergroup_id
      operationId: DeleteUsergroupIdOfOauthToken
      parameters:
      - description: Reference Id of the oauth_token
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of oauth_token
      tags:
      - usergroup_id
      - oauth_token
      - oauth_token_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a oauth_token
      operationId: GetUsergroupIdOfOauthTokenId
      parameters:
      - description: Reference Id of the oauth_token
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of oauth_token
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related oauth_token from the usergroup_id
      operationId: PatchUsergroupIdOfOauthToken
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of oauth_token
      tags:
      - usergroup_id
      - oauth_token
      - oauth_token_id
      - usergroup
      - has_many
      - patch
  /api/outbox:
    get:
      description: Returns a list of Outbox
      operationId: GetOutbox
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Outbox'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all outbox
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all outbox
      tags:
      - outbox
      - find
      - get
    post:
      operationId: CreateOutbox
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  from_address: Example Label
                  to_address: Example Label
                  to_host: Example Label
                type: outbox
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewOutbox'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - outbox
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: outbox to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Outbox'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: outbox response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new outbox
      tags:
      - outbox
      - create
  /api/outbox/{referenceId}:
    delete:
      description: Delete a outbox
      operationId: DeleteOutbox
      parameters:
      - description: Reference Id of the outbox
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete outbox
      tags:
      - outbox
      - delete
    get:
      description: Get outbox by id
      operationId: GetOutboxByReferenceId
      parameters:
      - description: Reference Id of the outbox
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outbox'
          description: get outbox by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get outbox by id
      tags:
      - outbox
    patch:
      description: Edit an existing outbox
      operationId: UpdateOutbox
      parameters:
      - description: Reference Id of the outbox
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Outbox'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Outbox'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated outbox
      summary: Update existing outbox
      tags:
      - outbox
  /api/outbox/{referenceId}/user_account:
    delete:
      description: Remove a related outbox from the user_account_id
      operationId: DeleteUserAccountIdOfOutbox
      parameters:
      - description: Reference Id of the outbox
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of outbox
      tags:
      - user_account_id
      - outbox
      - outbox_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a outbox
      operationId: GetUserAccountIdOfOutboxId
      parameters:
      - description: Reference Id of the outbox
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of outbox
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related outbox from the user_account_id
      operationId: PatchUserAccountIdOfOutbox
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of outbox
      tags:
      - user_account_id
      - outbox
      - outbox_id
      - user_account
      - belongs_to
      - patch
  /api/outbox/{referenceId}/usergroup:
    delete:
      description: Remove a related outbox from the usergroup_id
      operationId: DeleteUsergroupIdOfOutbox
      parameters:
      - description: Reference Id of the outbox
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of outbox
      tags:
      - usergroup_id
      - outbox
      - outbox_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a outbox
      operationId: GetUsergroupIdOfOutboxId
      parameters:
      - description: Reference Id of the outbox
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of outbox
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related outbox from the usergroup_id
      operationId: PatchUsergroupIdOfOutbox
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of outbox
      tags:
      - usergroup_id
      - outbox
      - outbox_id
      - usergroup
      - has_many
      - patch
  /api/site:
    get:
      description: Returns a list of Site
      operationId: GetSite
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Site'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all site
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all site
      tags:
      - site
      - find
      - get
    post:
      operationId: CreateSite
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  hostname: Example Label
                  name: Example Label
                  path: Example Label
                  site_type: Example Label
                type: site
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewSite'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - site
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: site to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Site'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: site response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new site
      tags:
      - site
      - create
  /api/site/{referenceId}:
    delete:
      description: Delete a site
      operationId: DeleteSite
      parameters:
      - description: Reference Id of the site
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete site
      tags:
      - site
      - delete
    get:
      description: Get site by id
      operationId: GetSiteByReferenceId
      parameters:
      - description: Reference Id of the site
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          description: get site by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get site by id
      tags:
      - site
    patch:
      description: Edit an existing site
      operationId: UpdateSite
      parameters:
      - description: Reference Id of the site
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Site'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Site'
                      id:
                        type: string
                      relationships:
                        properties:
                          cloud_store_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated site
      summary: Update existing site
      tags:
      - site
  /api/site/{referenceId}/cloud_store:
    delete:
      description: Remove a related site from the cloud_store_id
      operationId: DeleteCloudStoreIdOfSite
      parameters:
      - description: Reference Id of the site
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: cloud_store
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation cloud_store
      summary: Delete related cloud_store_id of site
      tags:
      - cloud_store_id
      - site
      - site_id
      - cloud_store
      - has_one
      - delete
    get:
      description: Returns a list of all Cloud store related to a site
      operationId: GetCloudStoreIdOfSiteId
      parameters:
      - description: Reference Id of the site
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CloudStore'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all cloud_store
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related cloud_store_id of site
      tags:
      - cloud_store
      - find
      - get
    patch:
      description: Add a related site from the cloud_store_id
      operationId: PatchCloudStoreIdOfSite
      parameters:
      - description: Reference Id of the cloud_store
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: cloud_store
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation cloud_store
      summary: Add related cloud_store_id of site
      tags:
      - cloud_store_id
      - site
      - site_id
      - cloud_store
      - has_one
      - patch
  /api/site/{referenceId}/user_account:
    delete:
      description: Remove a related site from the user_account_id
      operationId: DeleteUserAccountIdOfSite
      parameters:
      - description: Reference Id of the site
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of site
      tags:
      - user_account_id
      - site
      - site_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a site
      operationId: GetUserAccountIdOfSiteId
      parameters:
      - description: Reference Id of the site
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of site
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related site from the user_account_id
      operationId: PatchUserAccountIdOfSite
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of site
      tags:
      - user_account_id
      - site
      - site_id
      - user_account
      - belongs_to
      - patch
  /api/site/{referenceId}/usergroup:
    delete:
      description: Remove a related site from the usergroup_id
      operationId: DeleteUsergroupIdOfSite
      parameters:
      - description: Reference Id of the site
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of site
      tags:
      - usergroup_id
      - site
      - site_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a site
      operationId: GetUsergroupIdOfSiteId
      parameters:
      - description: Reference Id of the site
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of site
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related site from the usergroup_id
      operationId: PatchUsergroupIdOfSite
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of site
      tags:
      - usergroup_id
      - site
      - site_id
      - usergroup
      - has_many
      - patch
  /api/smd:
    get:
      description: Returns a list of Smd
      operationId: GetSmd
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Smd'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all smd
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all smd
      tags:
      - smd
      - find
      - get
    post:
      operationId: CreateSmd
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  initial_state: Example Label
                  label: Example Label
                  name: Example Label
                type: smd
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewSmd'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - smd
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: smd to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Smd'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: smd response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new smd
      tags:
      - smd
      - create
  /api/smd/{referenceId}:
    delete:
      description: Delete a smd
      operationId: DeleteSmd
      parameters:
      - description: Reference Id of the smd
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete smd
      tags:
      - smd
      - delete
    get:
      description: Get smd by id
      operationId: GetSmdByReferenceId
      parameters:
      - description: Reference Id of the smd
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Smd'
          description: get smd by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get smd by id
      tags:
      - smd
    patch:
      description: Edit an existing smd
      operationId: UpdateSmd
      parameters:
      - description: Reference Id of the smd
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Smd'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Smd'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated smd
      summary: Update existing smd
      tags:
      - smd
  /api/smd/{referenceId}/user_account:
    delete:
      description: Remove a related smd from the user_account_id
      operationId: DeleteUserAccountIdOfSmd
      parameters:
      - description: Reference Id of the smd
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of smd
      tags:
      - user_account_id
      - smd
      - smd_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a smd
      operationId: GetUserAccountIdOfSmdId
      parameters:
      - description: Reference Id of the smd
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of smd
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related smd from the user_account_id
      operationId: PatchUserAccountIdOfSmd
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of smd
      tags:
      - user_account_id
      - smd
      - smd_id
      - user_account
      - belongs_to
      - patch
  /api/smd/{referenceId}/usergroup:
    delete:
      description: Remove a related smd from the usergroup_id
      operationId: DeleteUsergroupIdOfSmd
      parameters:
      - description: Reference Id of the smd
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of smd
      tags:
      - usergroup_id
      - smd
      - smd_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a smd
      operationId: GetUsergroupIdOfSmdId
      parameters:
      - description: Reference Id of the smd
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of smd
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related smd from the usergroup_id
      operationId: PatchUsergroupIdOfSmd
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of smd
      tags:
      - usergroup_id
      - smd
      - smd_id
      - usergroup
      - has_many
      - patch
  /api/stream:
    get:
      description: Returns a list of Stream
      operationId: GetStream
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Stream'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all stream
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all stream
      tags:
      - stream
      - find
      - get
    post:
      operationId: CreateStream
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  stream_name: Example Label
                type: stream
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewStream'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - stream
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: stream to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Stream'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: stream response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new stream
      tags:
      - stream
      - create
  /api/stream/{referenceId}:
    delete:
      description: Delete a stream
      operationId: DeleteStream
      parameters:
      - description: Reference Id of the stream
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete stream
      tags:
      - stream
      - delete
    get:
      description: Get stream by id
      operationId: GetStreamByReferenceId
      parameters:
      - description: Reference Id of the stream
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
          description: get stream by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get stream by id
      tags:
      - stream
    patch:
      description: Edit an existing stream
      operationId: UpdateStream
      parameters:
      - description: Reference Id of the stream
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Stream'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Stream'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated stream
      summary: Update existing stream
      tags:
      - stream
  /api/stream/{referenceId}/user_account:
    delete:
      description: Remove a related stream from the user_account_id
      operationId: DeleteUserAccountIdOfStream
      parameters:
      - description: Reference Id of the stream
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of stream
      tags:
      - user_account_id
      - stream
      - stream_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a stream
      operationId: GetUserAccountIdOfStreamId
      parameters:
      - description: Reference Id of the stream
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of stream
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related stream from the user_account_id
      operationId: PatchUserAccountIdOfStream
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of stream
      tags:
      - user_account_id
      - stream
      - stream_id
      - user_account
      - belongs_to
      - patch
  /api/stream/{referenceId}/usergroup:
    delete:
      description: Remove a related stream from the usergroup_id
      operationId: DeleteUsergroupIdOfStream
      parameters:
      - description: Reference Id of the stream
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of stream
      tags:
      - usergroup_id
      - stream
      - stream_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a stream
      operationId: GetUsergroupIdOfStreamId
      parameters:
      - description: Reference Id of the stream
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of stream
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related stream from the usergroup_id
      operationId: PatchUsergroupIdOfStream
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of stream
      tags:
      - usergroup_id
      - stream
      - stream_id
      - usergroup
      - has_many
      - patch
  /api/task:
    get:
      description: Returns a list of Task
      operationId: GetTask
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Task'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all task
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all task
      tags:
      - task
      - find
      - get
    post:
      operationId: CreateTask
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  action_name: Example Label
                  entity_name: Example Label
                  job_type: Example Label
                  name: Example Label
                  schedule: Example Label
                type: task
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewTask'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - task
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: task to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Task'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: task response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new task
      tags:
      - task
      - create
  /api/task/{referenceId}:
    delete:
      description: Delete a task
      operationId: DeleteTask
      parameters:
      - description: Reference Id of the task
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete task
      tags:
      - task
      - delete
    get:
      description: Get task by id
      operationId: GetTaskByReferenceId
      parameters:
      - description: Reference Id of the task
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: get task by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get task by id
      tags:
      - task
    patch:
      description: Edit an existing task
      operationId: UpdateTask
      parameters:
      - description: Reference Id of the task
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Task'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Task'
                      id:
                        type: string
                      relationships:
                        properties:
                          as_user_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated task
      summary: Update existing task
      tags:
      - task
  /api/task/{referenceId}/user_account:
    delete:
      description: Remove a related task from the as_user_id
      operationId: DeleteAsUserIdOfTask
      parameters:
      - description: Reference Id of the task
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related as_user_id of task
      tags:
      - as_user_id
      - task
      - task_executed
      - user_account
      - has_one
      - delete
    get:
      description: Returns a list of all User account related to a task
      operationId: GetAsUserIdOfTaskExecuted
      parameters:
      - description: Reference Id of the task
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related as_user_id of task
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related task from the as_user_id
      operationId: PatchAsUserIdOfTask
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related as_user_id of task
      tags:
      - as_user_id
      - task
      - task_executed
      - user_account
      - has_one
      - patch
  /api/task/{referenceId}/usergroup:
    delete:
      description: Remove a related task from the usergroup_id
      operationId: DeleteUsergroupIdOfTask
      parameters:
      - description: Reference Id of the task
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of task
      tags:
      - usergroup_id
      - task
      - task_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a task
      operationId: GetUsergroupIdOfTaskId
      parameters:
      - description: Reference Id of the task
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of task
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related task from the usergroup_id
      operationId: PatchUsergroupIdOfTask
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of task
      tags:
      - usergroup_id
      - task
      - task_id
      - usergroup
      - has_many
      - patch
  /api/template:
    get:
      description: Returns a list of Template
      operationId: GetTemplate
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Template'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all template
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all template
      tags:
      - template
      - find
      - get
    post:
      operationId: CreateTemplate
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  mime_type: Example Label
                  name: Example Label
                type: template
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewTemplate'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - template
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: template to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Template'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: template response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new template
      tags:
      - template
      - create
  /api/template/{referenceId}:
    delete:
      description: Delete a template
      operationId: DeleteTemplate
      parameters:
      - description: Reference Id of the template
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete template
      tags:
      - template
      - delete
    get:
      description: Get template by id
      operationId: GetTemplateByReferenceId
      parameters:
      - description: Reference Id of the template
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: get template by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get template by id
      tags:
      - template
    patch:
      description: Edit an existing template
      operationId: UpdateTemplate
      parameters:
      - description: Reference Id of the template
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Template'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Template'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated template
      summary: Update existing template
      tags:
      - template
  /api/template/{referenceId}/user_account:
    delete:
      description: Remove a related template from the user_account_id
      operationId: DeleteUserAccountIdOfTemplate
      parameters:
      - description: Reference Id of the template
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of template
      tags:
      - user_account_id
      - template
      - template_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a template
      operationId: GetUserAccountIdOfTemplateId
      parameters:
      - description: Reference Id of the template
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of template
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related template from the user_account_id
      operationId: PatchUserAccountIdOfTemplate
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of template
      tags:
      - user_account_id
      - template
      - template_id
      - user_account
      - belongs_to
      - patch
  /api/template/{referenceId}/usergroup:
    delete:
      description: Remove a related template from the usergroup_id
      operationId: DeleteUsergroupIdOfTemplate
      parameters:
      - description: Reference Id of the template
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of template
      tags:
      - usergroup_id
      - template
      - template_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a template
      operationId: GetUsergroupIdOfTemplateId
      parameters:
      - description: Reference Id of the template
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of template
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related template from the usergroup_id
      operationId: PatchUsergroupIdOfTemplate
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of template
      tags:
      - usergroup_id
      - template
      - template_id
      - usergroup
      - has_many
      - patch
  /api/timeline:
    get:
      description: Returns a list of Timeline
      operationId: GetTimeline
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Timeline'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all timeline
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all timeline
      tags:
      - timeline
      - find
      - get
    post:
      operationId: CreateTimeline
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  event_type: Example Label
                  title: Example Label
                type: timeline
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewTimeline'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - timeline
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: timeline to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Timeline'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: timeline response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new timeline
      tags:
      - timeline
      - create
  /api/timeline/{referenceId}:
    delete:
      description: Delete a timeline
      operationId: DeleteTimeline
      parameters:
      - description: Reference Id of the timeline
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete timeline
      tags:
      - timeline
      - delete
    get:
      description: Get timeline by id
      operationId: GetTimelineByReferenceId
      parameters:
      - description: Reference Id of the timeline
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeline'
          description: get timeline by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get timeline by id
      tags:
      - timeline
    patch:
      description: Edit an existing timeline
      operationId: UpdateTimeline
      parameters:
      - description: Reference Id of the timeline
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Timeline'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Timeline'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          world_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated timeline
      summary: Update existing timeline
      tags:
      - timeline
  /api/timeline/{referenceId}/user_account:
    delete:
      description: Remove a related timeline from the user_account_id
      operationId: DeleteUserAccountIdOfTimeline
      parameters:
      - description: Reference Id of the timeline
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of timeline
      tags:
      - user_account_id
      - timeline
      - timeline_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a timeline
      operationId: GetUserAccountIdOfTimelineId
      parameters:
      - description: Reference Id of the timeline
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of timeline
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related timeline from the user_account_id
      operationId: PatchUserAccountIdOfTimeline
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of timeline
      tags:
      - user_account_id
      - timeline
      - timeline_id
      - user_account
      - belongs_to
      - patch
  /api/timeline/{referenceId}/usergroup:
    delete:
      description: Remove a related timeline from the usergroup_id
      operationId: DeleteUsergroupIdOfTimeline
      parameters:
      - description: Reference Id of the timeline
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of timeline
      tags:
      - usergroup_id
      - timeline
      - timeline_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a timeline
      operationId: GetUsergroupIdOfTimelineId
      parameters:
      - description: Reference Id of the timeline
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of timeline
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related timeline from the usergroup_id
      operationId: PatchUsergroupIdOfTimeline
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of timeline
      tags:
      - usergroup_id
      - timeline
      - timeline_id
      - usergroup
      - has_many
      - patch
  /api/timeline/{referenceId}/world:
    delete:
      description: Remove a related timeline from the world_id
      operationId: DeleteWorldIdOfTimeline
      parameters:
      - description: Reference Id of the timeline
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: world
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation world
      summary: Delete related world_id of timeline
      tags:
      - world_id
      - timeline
      - timeline_id
      - world
      - belongs_to
      - delete
    get:
      description: Returns a list of all World related to a timeline
      operationId: GetWorldIdOfTimelineId
      parameters:
      - description: Reference Id of the timeline
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/World'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all world
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related world_id of timeline
      tags:
      - world
      - find
      - get
    patch:
      description: Add a related timeline from the world_id
      operationId: PatchWorldIdOfTimeline
      parameters:
      - description: Reference Id of the world
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: world
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation world
      summary: Add related world_id of timeline
      tags:
      - world_id
      - timeline
      - timeline_id
      - world
      - belongs_to
      - patch
  /api/user_account:
    get:
      description: Returns a list of User account
      operationId: GetUserAccount
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all user_account
      tags:
      - user_account
      - find
      - get
    post:
      operationId: CreateUserAccount
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  email: user@example.com
                  name: Example Label
                type: user_account
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewUserAccount'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - user_account
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: user_account to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/UserAccount'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: user_account response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new user_account
      tags:
      - user_account
      - create
  /api/user_account/{referenceId}:
    delete:
      description: Delete a user_account
      operationId: DeleteUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete user_account
      tags:
      - user_account
      - delete
    get:
      description: Get user_account by id
      operationId: GetUserAccountByReferenceId
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
          description: get user_account by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get user_account by id
      tags:
      - user_account
    patch:
      description: Edit an existing user_account
      operationId: UpdateUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/UserAccount'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/UserAccount'
                      id:
                        type: string
                      relationships:
                        properties:
                          action_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          calendar_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          certificate_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          cloud_store_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          collection_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          credential_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          data_exchange_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          document_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          feed_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          integration_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          json_schema_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          mail_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          mail_box_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          mail_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          mail_server_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          oauth_connect_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          oauth_token_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          outbox_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          site_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          smd_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          stream_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          task_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          template_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          timeline_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_otp_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          world_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated user_account
      summary: Delete related outbox_id of user_account
      tags:
      - user_account_id
      - outbox
      - outbox_id
      - user_account
      - belongs_to
      - delete
  /api/user_account/{referenceId}/action:
    delete:
      description: Remove a related action_id from the user_account_id
      operationId: DeleteActionOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: action
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation action
      tags:
      - action
    get:
      description: Returns a list of Action
      operationId: RelatedActionIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Action'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related ActionId of a UserAccount
      tags:
      - action
      - find
      - get
  /api/user_account/{referenceId}/calendar:
    delete:
      description: Remove a related calendar_id from the user_account_id
      operationId: DeleteCalendarOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: calendar
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation calendar
      tags:
      - calendar
    get:
      description: Returns a list of Calendar
      operationId: RelatedCalendarIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Calendar'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all calendar
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related CalendarId of a UserAccount
      tags:
      - calendar
      - find
      - get
  /api/user_account/{referenceId}/certificate:
    delete:
      description: Remove a related certificate_id from the user_account_id
      operationId: DeleteCertificateOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: certificate
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation certificate
      tags:
      - certificate
    get:
      description: Returns a list of Certificate
      operationId: RelatedCertificateIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Certificate'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all certificate
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related CertificateId of a UserAccount
      tags:
      - certificate
      - find
      - get
  /api/user_account/{referenceId}/cloud_store:
    delete:
      description: Remove a related cloud_store_id from the user_account_id
      operationId: DeleteCloudStoreOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: cloud_store
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation cloud_store
      tags:
      - cloud_store
    get:
      description: Returns a list of Cloud store
      operationId: RelatedCloudStoreIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CloudStore'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all cloud_store
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related CloudStoreId of a UserAccount
      tags:
      - cloud_store
      - find
      - get
  /api/user_account/{referenceId}/collection:
    delete:
      description: Remove a related collection_id from the user_account_id
      operationId: DeleteCollectionOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: collection
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation collection
      tags:
      - collection
    get:
      description: Returns a list of Collection
      operationId: RelatedCollectionIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Collection'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all collection
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related CollectionId of a UserAccount
      tags:
      - collection
      - find
      - get
  /api/user_account/{referenceId}/credential:
    delete:
      description: Remove a related credential_id from the user_account_id
      operationId: DeleteCredentialOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: credential
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation credential
      tags:
      - credential
    get:
      description: Returns a list of Credential
      operationId: RelatedCredentialIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Credential'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all credential
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related CredentialId of a UserAccount
      tags:
      - credential
      - find
      - get
  /api/user_account/{referenceId}/data_exchange:
    delete:
      description: Remove a related data_exchange_id from the user_account_id
      operationId: DeleteDataExchangeOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: data_exchange
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation data_exchange
      tags:
      - data_exchange
    get:
      description: Returns a list of Data exchange
      operationId: RelatedDataExchangeIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/DataExchange'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all data_exchange
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related DataExchangeId of a UserAccount
      tags:
      - data_exchange
      - find
      - get
  /api/user_account/{referenceId}/document:
    delete:
      description: Remove a related document_id from the user_account_id
      operationId: DeleteDocumentOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: document
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation document
      tags:
      - document
    get:
      description: Returns a list of Document
      operationId: RelatedDocumentIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Document'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all document
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related DocumentId of a UserAccount
      tags:
      - document
      - find
      - get
  /api/user_account/{referenceId}/feed:
    delete:
      description: Remove a related feed_id from the user_account_id
      operationId: DeleteFeedOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: feed
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation feed
      tags:
      - feed
    get:
      description: Returns a list of Feed
      operationId: RelatedFeedIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Feed'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all feed
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related FeedId of a UserAccount
      tags:
      - feed
      - find
      - get
  /api/user_account/{referenceId}/integration:
    delete:
      description: Remove a related integration_id from the user_account_id
      operationId: DeleteIntegrationOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: integration
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation integration
      tags:
      - integration
    get:
      description: Returns a list of Integration
      operationId: RelatedIntegrationIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Integration'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all integration
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related IntegrationId of a UserAccount
      tags:
      - integration
      - find
      - get
  /api/user_account/{referenceId}/json_schema:
    delete:
      description: Remove a related json_schema_id from the user_account_id
      operationId: DeleteJsonSchemaOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: json_schema
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation json_schema
      tags:
      - json_schema
    get:
      description: Returns a list of Json schema
      operationId: RelatedJsonSchemaIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/JsonSchema'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all json_schema
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related JsonSchemaId of a UserAccount
      tags:
      - json_schema
      - find
      - get
  /api/user_account/{referenceId}/mail:
    delete:
      description: Remove a related mail_id from the user_account_id
      operationId: DeleteMailOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: mail
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation mail
      tags:
      - mail
    get:
      description: Returns a list of Mail
      operationId: RelatedMailIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Mail'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related MailId of a UserAccount
      tags:
      - mail
      - find
      - get
  /api/user_account/{referenceId}/mail_account:
    delete:
      description: Remove a related mail_account_id from the user_account_id
      operationId: DeleteMailAccountOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: mail_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation mail_account
      tags:
      - mail_account
    get:
      description: Returns a list of Mail account
      operationId: RelatedMailAccountIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related MailAccountId of a UserAccount
      tags:
      - mail_account
      - find
      - get
  /api/user_account/{referenceId}/mail_box:
    delete:
      description: Remove a related mail_box_id from the user_account_id
      operationId: DeleteMailBoxOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: mail_box
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation mail_box
      tags:
      - mail_box
    get:
      description: Returns a list of Mail box
      operationId: RelatedMailBoxIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailBox'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_box
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related MailBoxId of a UserAccount
      tags:
      - mail_box
      - find
      - get
  /api/user_account/{referenceId}/mail_server:
    delete:
      description: Remove a related mail_server_id from the user_account_id
      operationId: DeleteMailServerOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: mail_server
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation mail_server
      tags:
      - mail_server
    get:
      description: Returns a list of Mail server
      operationId: RelatedMailServerIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailServer'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_server
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related MailServerId of a UserAccount
      tags:
      - mail_server
      - find
      - get
  /api/user_account/{referenceId}/oauth_connect:
    delete:
      description: Remove a related oauth_connect_id from the user_account_id
      operationId: DeleteOauthConnectOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: oauth_connect
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation oauth_connect
      tags:
      - oauth_connect
    get:
      description: Returns a list of Oauth connect
      operationId: RelatedOauthConnectIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/OauthConnect'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all oauth_connect
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related OauthConnectId of a UserAccount
      tags:
      - oauth_connect
      - find
      - get
  /api/user_account/{referenceId}/oauth_token:
    delete:
      description: Remove a related oauth_token_id from the user_account_id
      operationId: DeleteOauthTokenOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: oauth_token
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation oauth_token
      tags:
      - oauth_token
    get:
      description: Returns a list of Oauth token
      operationId: RelatedOauthTokenIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/OauthToken'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all oauth_token
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related OauthTokenId of a UserAccount
      tags:
      - oauth_token
      - find
      - get
  /api/user_account/{referenceId}/outbox:
    delete:
      description: Remove a related outbox_id from the user_account_id
      operationId: DeleteOutboxOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: outbox
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation outbox
      tags:
      - outbox
    get:
      description: Returns a list of Outbox
      operationId: RelatedOutboxIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Outbox'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all outbox
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related OutboxId of a UserAccount
      tags:
      - outbox
      - find
      - get
  /api/user_account/{referenceId}/site:
    delete:
      description: Remove a related site_id from the user_account_id
      operationId: DeleteSiteOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: site
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation site
      tags:
      - site
    get:
      description: Returns a list of Site
      operationId: RelatedSiteIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Site'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all site
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related SiteId of a UserAccount
      tags:
      - site
      - find
      - get
  /api/user_account/{referenceId}/smd:
    delete:
      description: Remove a related smd_id from the user_account_id
      operationId: DeleteSmdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: smd
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation smd
      tags:
      - smd
    get:
      description: Returns a list of Smd
      operationId: RelatedSmdIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Smd'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all smd
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related SmdId of a UserAccount
      tags:
      - smd
      - find
      - get
  /api/user_account/{referenceId}/stream:
    delete:
      description: Remove a related stream_id from the user_account_id
      operationId: DeleteStreamOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: stream
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation stream
      tags:
      - stream
    get:
      description: Returns a list of Stream
      operationId: RelatedStreamIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Stream'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all stream
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related StreamId of a UserAccount
      tags:
      - stream
      - find
      - get
  /api/user_account/{referenceId}/task:
    delete:
      description: Remove a related task_id from the user_account_id
      operationId: DeleteTaskOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: task
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation task
      tags:
      - task
    get:
      description: Returns a list of Task
      operationId: RelatedTaskIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Task'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all task
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related TaskId of a UserAccount
      tags:
      - task
      - find
      - get
  /api/user_account/{referenceId}/template:
    delete:
      description: Remove a related template_id from the user_account_id
      operationId: DeleteTemplateOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: template
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation template
      tags:
      - template
    get:
      description: Returns a list of Template
      operationId: RelatedTemplateIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Template'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all template
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related TemplateId of a UserAccount
      tags:
      - template
      - find
      - get
  /api/user_account/{referenceId}/timeline:
    delete:
      description: Remove a related timeline_id from the user_account_id
      operationId: DeleteTimelineOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: timeline
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation timeline
      tags:
      - timeline
    get:
      description: Returns a list of Timeline
      operationId: RelatedTimelineIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Timeline'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all timeline
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related TimelineId of a UserAccount
      tags:
      - timeline
      - find
      - get
  /api/user_account/{referenceId}/user_account:
    delete:
      description: Remove a related user_account from the user_account_id
      operationId: DeleteUserAccountIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of user_account
      tags:
      - user_account_id
      - user_account
      - user_account_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a user_account
      operationId: GetUserAccountIdOfUserAccountId
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of user_account
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related user_account from the user_account_id
      operationId: PatchUserAccountIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of user_account
      tags:
      - user_account_id
      - user_account
      - user_account_id
      - user_account
      - belongs_to
      - patch
  /api/user_account/{referenceId}/user_otp_account:
    delete:
      description: Remove a related user_otp_account_id from the user_account_id
      operationId: DeleteUserOtpAccountOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_otp_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_otp_account
      tags:
      - user_otp_account
    get:
      description: Returns a list of User otp account
      operationId: RelatedUserOtpAccountIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserOtpAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_otp_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related UserOtpAccountId of a UserAccount
      tags:
      - user_otp_account
      - find
      - get
  /api/user_account/{referenceId}/usergroup:
    delete:
      description: Remove a related user_account from the usergroup_id
      operationId: DeleteUsergroupIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of user_account
      tags:
      - usergroup_id
      - user_account
      - user_account_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a user_account
      operationId: GetUsergroupIdOfUserAccountId
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of user_account
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related user_account from the usergroup_id
      operationId: PatchUsergroupIdOfUserAccount
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of user_account
      tags:
      - usergroup_id
      - user_account
      - user_account_id
      - usergroup
      - has_many
      - patch
  /api/user_account/{referenceId}/world:
    delete:
      description: Remove a related world_id from the user_account_id
      operationId: DeleteWorldOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: world
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation world
      tags:
      - world
    get:
      description: Returns a list of World
      operationId: RelatedWorldIdOfUserAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/World'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all world
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related WorldId of a UserAccount
      tags:
      - world
      - find
      - get
  /api/user_otp_account:
    get:
      description: Returns a list of User otp account
      operationId: GetUserOtpAccount
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserOtpAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_otp_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all user_otp_account
      tags:
      - user_otp_account
      - find
      - get
    post:
      operationId: CreateUserOtpAccount
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  mobile_number: Example Label
                type: user_otp_account
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewUserOtpAccount'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - user_otp_account
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: user_otp_account to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/UserOtpAccount'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: user_otp_account response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new user_otp_account
      tags:
      - user_otp_account
      - create
  /api/user_otp_account/{referenceId}:
    delete:
      description: Delete a user_otp_account
      operationId: DeleteUserOtpAccount
      parameters:
      - description: Reference Id of the user_otp_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete user_otp_account
      tags:
      - user_otp_account
      - delete
    get:
      description: Get user_otp_account by id
      operationId: GetUserOtpAccountByReferenceId
      parameters:
      - description: Reference Id of the user_otp_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOtpAccount'
          description: get user_otp_account by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get user_otp_account by id
      tags:
      - user_otp_account
    patch:
      description: Edit an existing user_otp_account
      operationId: UpdateUserOtpAccount
      parameters:
      - description: Reference Id of the user_otp_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/UserOtpAccount'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/UserOtpAccount'
                      id:
                        type: string
                      relationships:
                        properties:
                          otp_of_account:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated user_otp_account
      summary: Update existing user_otp_account
      tags:
      - user_otp_account
  /api/user_otp_account/{referenceId}/user_account:
    delete:
      description: Remove a related user_otp_account from the otp_of_account
      operationId: DeleteOtpOfAccountOfUserOtpAccount
      parameters:
      - description: Reference Id of the user_otp_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related otp_of_account of user_otp_account
      tags:
      - otp_of_account
      - user_otp_account
      - primary_user_otp
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a user_otp_account
      operationId: GetOtpOfAccountOfPrimaryUserOtp
      parameters:
      - description: Reference Id of the user_otp_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related otp_of_account of user_otp_account
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related user_otp_account from the otp_of_account
      operationId: PatchOtpOfAccountOfUserOtpAccount
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related otp_of_account of user_otp_account
      tags:
      - otp_of_account
      - user_otp_account
      - primary_user_otp
      - user_account
      - belongs_to
      - patch
  /api/user_otp_account/{referenceId}/usergroup:
    delete:
      description: Remove a related user_otp_account from the usergroup_id
      operationId: DeleteUsergroupIdOfUserOtpAccount
      parameters:
      - description: Reference Id of the user_otp_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of user_otp_account
      tags:
      - usergroup_id
      - user_otp_account
      - user_otp_account_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a user_otp_account
      operationId: GetUsergroupIdOfUserOtpAccountId
      parameters:
      - description: Reference Id of the user_otp_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of user_otp_account
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related user_otp_account from the usergroup_id
      operationId: PatchUsergroupIdOfUserOtpAccount
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of user_otp_account
      tags:
      - usergroup_id
      - user_otp_account
      - user_otp_account_id
      - usergroup
      - has_many
      - patch
  /api/usergroup:
    get:
      description: Returns a list of Usergroup
      operationId: GetUsergroup
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all usergroup
      tags:
      - usergroup
      - find
      - get
    post:
      operationId: CreateUsergroup
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  name: Example Label
                type: usergroup
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewUsergroup'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - usergroup
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: usergroup to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Usergroup'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: usergroup response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new usergroup
      tags:
      - usergroup
      - create
  /api/usergroup/{referenceId}:
    delete:
      description: Delete a usergroup
      operationId: DeleteUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete usergroup
      tags:
      - usergroup
      - delete
    get:
      description: Get usergroup by id
      operationId: GetUsergroupByReferenceId
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usergroup'
          description: get usergroup by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get usergroup by id
      tags:
      - usergroup
    patch:
      description: Edit an existing usergroup
      operationId: UpdateUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/Usergroup'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/Usergroup'
                      id:
                        type: string
                      relationships:
                        properties:
                          action_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          calendar_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          certificate_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          cloud_store_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          collection_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          credential_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          data_exchange_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          document_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          feed_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          integration_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          json_schema_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          mail_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          mail_box_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          mail_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          mail_server_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          oauth_connect_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          oauth_token_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          outbox_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          site_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          smd_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          stream_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          task_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          template_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          timeline_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          user_otp_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          world_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated usergroup
      summary: Delete related outbox_id of usergroup
      tags:
      - usergroup_id
      - outbox
      - outbox_id
      - usergroup
      - has_many
      - delete
  /api/usergroup/{referenceId}/action:
    delete:
      description: Remove a related action_id from the usergroup_id
      operationId: DeleteActionOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: action
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation action
      tags:
      - action
    get:
      description: Returns a list of Action
      operationId: RelatedActionIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Action'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all action
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related ActionId of a Usergroup
      tags:
      - action
      - find
      - get
  /api/usergroup/{referenceId}/calendar:
    delete:
      description: Remove a related calendar_id from the usergroup_id
      operationId: DeleteCalendarOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: calendar
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation calendar
      tags:
      - calendar
    get:
      description: Returns a list of Calendar
      operationId: RelatedCalendarIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Calendar'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all calendar
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related CalendarId of a Usergroup
      tags:
      - calendar
      - find
      - get
  /api/usergroup/{referenceId}/certificate:
    delete:
      description: Remove a related certificate_id from the usergroup_id
      operationId: DeleteCertificateOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: certificate
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation certificate
      tags:
      - certificate
    get:
      description: Returns a list of Certificate
      operationId: RelatedCertificateIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Certificate'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all certificate
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related CertificateId of a Usergroup
      tags:
      - certificate
      - find
      - get
  /api/usergroup/{referenceId}/cloud_store:
    delete:
      description: Remove a related cloud_store_id from the usergroup_id
      operationId: DeleteCloudStoreOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: cloud_store
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation cloud_store
      tags:
      - cloud_store
    get:
      description: Returns a list of Cloud store
      operationId: RelatedCloudStoreIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CloudStore'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all cloud_store
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related CloudStoreId of a Usergroup
      tags:
      - cloud_store
      - find
      - get
  /api/usergroup/{referenceId}/collection:
    delete:
      description: Remove a related collection_id from the usergroup_id
      operationId: DeleteCollectionOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: collection
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation collection
      tags:
      - collection
    get:
      description: Returns a list of Collection
      operationId: RelatedCollectionIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Collection'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all collection
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related CollectionId of a Usergroup
      tags:
      - collection
      - find
      - get
  /api/usergroup/{referenceId}/credential:
    delete:
      description: Remove a related credential_id from the usergroup_id
      operationId: DeleteCredentialOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: credential
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation credential
      tags:
      - credential
    get:
      description: Returns a list of Credential
      operationId: RelatedCredentialIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Credential'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all credential
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related CredentialId of a Usergroup
      tags:
      - credential
      - find
      - get
  /api/usergroup/{referenceId}/data_exchange:
    delete:
      description: Remove a related data_exchange_id from the usergroup_id
      operationId: DeleteDataExchangeOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: data_exchange
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation data_exchange
      tags:
      - data_exchange
    get:
      description: Returns a list of Data exchange
      operationId: RelatedDataExchangeIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/DataExchange'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all data_exchange
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related DataExchangeId of a Usergroup
      tags:
      - data_exchange
      - find
      - get
  /api/usergroup/{referenceId}/document:
    delete:
      description: Remove a related document_id from the usergroup_id
      operationId: DeleteDocumentOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: document
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation document
      tags:
      - document
    get:
      description: Returns a list of Document
      operationId: RelatedDocumentIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Document'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all document
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related DocumentId of a Usergroup
      tags:
      - document
      - find
      - get
  /api/usergroup/{referenceId}/feed:
    delete:
      description: Remove a related feed_id from the usergroup_id
      operationId: DeleteFeedOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: feed
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation feed
      tags:
      - feed
    get:
      description: Returns a list of Feed
      operationId: RelatedFeedIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Feed'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all feed
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related FeedId of a Usergroup
      tags:
      - feed
      - find
      - get
  /api/usergroup/{referenceId}/integration:
    delete:
      description: Remove a related integration_id from the usergroup_id
      operationId: DeleteIntegrationOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: integration
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation integration
      tags:
      - integration
    get:
      description: Returns a list of Integration
      operationId: RelatedIntegrationIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Integration'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all integration
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related IntegrationId of a Usergroup
      tags:
      - integration
      - find
      - get
  /api/usergroup/{referenceId}/json_schema:
    delete:
      description: Remove a related json_schema_id from the usergroup_id
      operationId: DeleteJsonSchemaOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: json_schema
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation json_schema
      tags:
      - json_schema
    get:
      description: Returns a list of Json schema
      operationId: RelatedJsonSchemaIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/JsonSchema'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all json_schema
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related JsonSchemaId of a Usergroup
      tags:
      - json_schema
      - find
      - get
  /api/usergroup/{referenceId}/mail:
    delete:
      description: Remove a related mail_id from the usergroup_id
      operationId: DeleteMailOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: mail
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation mail
      tags:
      - mail
    get:
      description: Returns a list of Mail
      operationId: RelatedMailIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Mail'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related MailId of a Usergroup
      tags:
      - mail
      - find
      - get
  /api/usergroup/{referenceId}/mail_account:
    delete:
      description: Remove a related mail_account_id from the usergroup_id
      operationId: DeleteMailAccountOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: mail_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation mail_account
      tags:
      - mail_account
    get:
      description: Returns a list of Mail account
      operationId: RelatedMailAccountIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related MailAccountId of a Usergroup
      tags:
      - mail_account
      - find
      - get
  /api/usergroup/{referenceId}/mail_box:
    delete:
      description: Remove a related mail_box_id from the usergroup_id
      operationId: DeleteMailBoxOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: mail_box
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation mail_box
      tags:
      - mail_box
    get:
      description: Returns a list of Mail box
      operationId: RelatedMailBoxIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailBox'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_box
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related MailBoxId of a Usergroup
      tags:
      - mail_box
      - find
      - get
  /api/usergroup/{referenceId}/mail_server:
    delete:
      description: Remove a related mail_server_id from the usergroup_id
      operationId: DeleteMailServerOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: mail_server
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation mail_server
      tags:
      - mail_server
    get:
      description: Returns a list of Mail server
      operationId: RelatedMailServerIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/MailServer'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all mail_server
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related MailServerId of a Usergroup
      tags:
      - mail_server
      - find
      - get
  /api/usergroup/{referenceId}/oauth_connect:
    delete:
      description: Remove a related oauth_connect_id from the usergroup_id
      operationId: DeleteOauthConnectOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: oauth_connect
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation oauth_connect
      tags:
      - oauth_connect
    get:
      description: Returns a list of Oauth connect
      operationId: RelatedOauthConnectIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/OauthConnect'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all oauth_connect
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related OauthConnectId of a Usergroup
      tags:
      - oauth_connect
      - find
      - get
  /api/usergroup/{referenceId}/oauth_token:
    delete:
      description: Remove a related oauth_token_id from the usergroup_id
      operationId: DeleteOauthTokenOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: oauth_token
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation oauth_token
      tags:
      - oauth_token
    get:
      description: Returns a list of Oauth token
      operationId: RelatedOauthTokenIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/OauthToken'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all oauth_token
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related OauthTokenId of a Usergroup
      tags:
      - oauth_token
      - find
      - get
  /api/usergroup/{referenceId}/outbox:
    delete:
      description: Remove a related outbox_id from the usergroup_id
      operationId: DeleteOutboxOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: outbox
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation outbox
      tags:
      - outbox
    get:
      description: Returns a list of Outbox
      operationId: RelatedOutboxIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Outbox'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all outbox
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related OutboxId of a Usergroup
      tags:
      - outbox
      - find
      - get
  /api/usergroup/{referenceId}/site:
    delete:
      description: Remove a related site_id from the usergroup_id
      operationId: DeleteSiteOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: site
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation site
      tags:
      - site
    get:
      description: Returns a list of Site
      operationId: RelatedSiteIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Site'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all site
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related SiteId of a Usergroup
      tags:
      - site
      - find
      - get
  /api/usergroup/{referenceId}/smd:
    delete:
      description: Remove a related smd_id from the usergroup_id
      operationId: DeleteSmdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: smd
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation smd
      tags:
      - smd
    get:
      description: Returns a list of Smd
      operationId: RelatedSmdIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Smd'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all smd
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related SmdId of a Usergroup
      tags:
      - smd
      - find
      - get
  /api/usergroup/{referenceId}/stream:
    delete:
      description: Remove a related stream_id from the usergroup_id
      operationId: DeleteStreamOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: stream
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation stream
      tags:
      - stream
    get:
      description: Returns a list of Stream
      operationId: RelatedStreamIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Stream'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all stream
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related StreamId of a Usergroup
      tags:
      - stream
      - find
      - get
  /api/usergroup/{referenceId}/task:
    delete:
      description: Remove a related task_id from the usergroup_id
      operationId: DeleteTaskOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: task
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation task
      tags:
      - task
    get:
      description: Returns a list of Task
      operationId: RelatedTaskIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Task'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all task
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related TaskId of a Usergroup
      tags:
      - task
      - find
      - get
  /api/usergroup/{referenceId}/template:
    delete:
      description: Remove a related template_id from the usergroup_id
      operationId: DeleteTemplateOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: template
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation template
      tags:
      - template
    get:
      description: Returns a list of Template
      operationId: RelatedTemplateIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Template'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all template
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related TemplateId of a Usergroup
      tags:
      - template
      - find
      - get
  /api/usergroup/{referenceId}/timeline:
    delete:
      description: Remove a related timeline_id from the usergroup_id
      operationId: DeleteTimelineOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: timeline
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation timeline
      tags:
      - timeline
    get:
      description: Returns a list of Timeline
      operationId: RelatedTimelineIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Timeline'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all timeline
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related TimelineId of a Usergroup
      tags:
      - timeline
      - find
      - get
  /api/usergroup/{referenceId}/user_account:
    delete:
      description: Remove a related user_account_id from the usergroup_id
      operationId: DeleteUserAccountOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      tags:
      - user_account
    get:
      description: Returns a list of User account
      operationId: RelatedUserAccountIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related UserAccountId of a Usergroup
      tags:
      - user_account
      - find
      - get
  /api/usergroup/{referenceId}/user_otp_account:
    delete:
      description: Remove a related user_otp_account_id from the usergroup_id
      operationId: DeleteUserOtpAccountOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_otp_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_otp_account
      tags:
      - user_otp_account
    get:
      description: Returns a list of User otp account
      operationId: RelatedUserOtpAccountIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserOtpAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_otp_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related UserOtpAccountId of a Usergroup
      tags:
      - user_otp_account
      - find
      - get
  /api/usergroup/{referenceId}/world:
    delete:
      description: Remove a related world_id from the usergroup_id
      operationId: DeleteWorldOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: world
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation world
      tags:
      - world
    get:
      description: Returns a list of World
      operationId: RelatedWorldIdOfUsergroup
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/World'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all world
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Related WorldId of a Usergroup
      tags:
      - world
      - find
      - get
  /api/world:
    get:
      description: Returns a list of World
      operationId: GetWorld
      parameters:
      - $ref: '#/components/parameters/Sort'
      - $ref: '#/components/parameters/PageNumber'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Filter'
      - $ref: '#/components/parameters/IncludedRelations'
      - $ref: '#/components/parameters/Fields'
      - description: Reference ID for cursor-based pagination. Returns results after
          this ID.
        example: 550e8400-e29b-41d4-a716-446655440000
        in: query
        name: page[after]
        required: false
        schema:
          format: uuid
          type: string
      - description: 'Base64 encoded JSON for grouping results. Example: {"column":"category","function":"count"}'
        example: eyJjb2x1bW4iOiJjYXRlZ29yeSIsImZ1bmN0aW9uIjoiY291bnQifQ==
        in: query
        name: group
        required: false
        schema:
          type: string
      - description: 'Response format. Supported: application/json (default), text/csv,
          application/xml'
        in: header
        name: accept
        required: false
        schema:
          default: application/json
          enum:
          - application/json
          - text/csv
          - application/xml
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/World'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all world
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: List all world
      tags:
      - world
      - find
      - get
    post:
      operationId: CreateWorld
      requestBody:
        content:
          application/json:
            example:
              data:
                attributes:
                  icon: Example Label
                  table_name: John Doe
                type: world
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/NewWorld'
                    relationships:
                      additionalProperties:
                        properties:
                          data:
                            properties:
                              id:
                                format: uuid
                                type: string
                              type:
                                type: string
                            type: object
                        type: object
                      description: Related resources to create relationships with
                      type: object
                    type:
                      description: Resource type identifier
                      enum:
                      - world
                      type: string
                  required:
                  - type
                  - attributes
                  type: object
              required:
              - data
              type: object
        description: world to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/World'
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: world response
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Create a new world
      tags:
      - world
      - create
  /api/world/{referenceId}:
    delete:
      description: Delete a world
      operationId: DeleteWorld
      parameters:
      - description: Reference Id of the world
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content - Resource deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Delete world
      tags:
      - world
      - delete
    get:
      description: Get world by id
      operationId: GetWorldByReferenceId
      parameters:
      - description: Reference Id of the world
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
          description: get world by reference id
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      summary: Get world by id
      tags:
      - world
    patch:
      description: Edit an existing world
      operationId: UpdateWorld
      parameters:
      - description: Reference Id of the world
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    attributes:
                      $ref: '#/components/schemas/World'
                    id:
                      type: string
                  type: object
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      attributes:
                        $ref: '#/components/schemas/World'
                      id:
                        type: string
                      relationships:
                        properties:
                          user_account_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                          usergroup_id:
                            $ref: '#/components/schemas/IncludedRelationship'
                        type: object
                      type:
                        type: string
                    type: object
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
          description: updated world
      summary: Update existing world
      tags:
      - world
  /api/world/{referenceId}/user_account:
    delete:
      description: Remove a related world from the user_account_id
      operationId: DeleteUserAccountIdOfWorld
      parameters:
      - description: Reference Id of the world
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: user_account
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation user_account
      summary: Delete related user_account_id of world
      tags:
      - user_account_id
      - world
      - world_id
      - user_account
      - belongs_to
      - delete
    get:
      description: Returns a list of all User account related to a world
      operationId: GetUserAccountIdOfWorldId
      parameters:
      - description: Reference Id of the world
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all user_account
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related user_account_id of world
      tags:
      - user_account
      - find
      - get
    patch:
      description: Add a related world from the user_account_id
      operationId: PatchUserAccountIdOfWorld
      parameters:
      - description: Reference Id of the user_account
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: user_account
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation user_account
      summary: Add related user_account_id of world
      tags:
      - user_account_id
      - world
      - world_id
      - user_account
      - belongs_to
      - patch
  /api/world/{referenceId}/usergroup:
    delete:
      description: Remove a related world from the usergroup_id
      operationId: DeleteUsergroupIdOfWorld
      parameters:
      - description: Reference Id of the world
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  data:
                    properties:
                      id:
                        type: string
                      type:
                        default: usergroup
                        type: string
                    type: object
                type: object
              type: array
      responses:
        "200":
          description: Successful deletion of relation usergroup
      summary: Delete related usergroup_id of world
      tags:
      - usergroup_id
      - world
      - world_id
      - usergroup
      - has_many
      - delete
    get:
      description: Returns a list of all Usergroup related to a world
      operationId: GetUsergroupIdOfWorldId
      parameters:
      - description: Reference Id of the world
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Usergroup'
                    type: array
                  included:
                    description: Included related resources when using included_relations
                      parameter
                    items:
                      type: object
                    type: array
                  links:
                    $ref: '#/components/schemas/PaginationStatus'
                type: object
            application/xml:
              schema:
                description: 'XML formatted data. Use Accept: application/xml header.'
                example: <data><item><id>1</id><name>John Doe</name></item></data>
                type: string
            text/csv:
              schema:
                description: 'CSV formatted data. Use Accept: text/csv header.'
                example: |
                  id,name,email,created_at
                  1,John Doe,john@example.com,2024-01-15T09:30:00Z
                type: string
          description: list of all usergroup
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Fetch related usergroup_id of world
      tags:
      - usergroup
      - find
      - get
    patch:
      description: Add a related world from the usergroup_id
      operationId: PatchUsergroupIdOfWorld
      parameters:
      - description: Reference Id of the usergroup
        in: path
        name: referenceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    id:
                      type: string
                    type:
                      default: usergroup
                      type: string
                  type: object
              type: object
      responses:
        "200":
          description: Add relation usergroup
      summary: Add related usergroup_id of world
      tags:
      - usergroup_id
      - world
      - world_id
      - usergroup
      - has_many
      - patch
components:
  parameters:
    Fields:
      description: Comma-separated list of fields to include in the response. Reduces
        payload size.
      example: id,name,email,created_at
      in: query
      name: fields
      schema:
        type: string
    Filter:
      description: 'JSON-based filtering. Supports operators: eq, ne, gt, gte, lt,
        lte, like, in, between'
      example: '{"name":{"like":"%john%"},"age":{"gte":18}}'
      in: query
      name: filter
      schema:
        type: string
    IncludedRelations:
      description: Comma-separated list of relationships to include in the response
      example: author,comments,tags
      in: query
      name: included_relations
      schema:
        type: string
    PageNumber:
      description: Page number for pagination (1-based)
      example: 2
      in: query
      name: page[number]
      schema:
        default: 1
        minimum: 1
        type: integer
    PageSize:
      description: Number of items per page
      example: 20
      in: query
      name: page[size]
      schema:
        default: 20
        maximum: 100
        minimum: 1
        type: integer
    Query:
      description: Full-text search across all indexed text columns
      example: search term
      in: query
      name: query
      schema:
        type: string
    Sort:
      description: Sort fields. Use - prefix for descending order. Multiple fields
        can be comma-separated.
      example: -created_at,name
      in: query
      name: sort
      schema:
        type: string
  responses:
    BadRequest:
      content:
        application/json:
          example:
            errors:
            - detail: The filter parameter contains invalid JSON
              source:
                parameter: filter
              status: "400"
              title: Bad Request
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Bad Request - Invalid input parameters or malformed request
    Forbidden:
      content:
        application/json:
          example:
            errors:
            - detail: You don't have permission to update this resource
              status: "403"
              title: Forbidden
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Forbidden - You don't have permission to access this resource
    InternalServerError:
      content:
        application/json:
          example:
            errors:
            - detail: An unexpected error occurred. Please try again later.
              status: "500"
              title: Internal Server Error
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Internal Server Error - Something went wrong on the server
    NotFound:
      content:
        application/json:
          example:
            errors:
            - detail: Resource with the specified ID was not found
              status: "404"
              title: Not Found
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Not Found - The requested resource doesn't exist
    TooManyRequests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RateLimitResponse'
      description: Too Many Requests - Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          description: The maximum number of requests allowed
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: The number of requests remaining
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Unix timestamp when rate limit resets
          schema:
            type: integer
    Unauthorized:
      content:
        application/json:
          example:
            errors:
            - detail: Invalid or expired JWT token
              status: "401"
              title: Unauthorized
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unauthorized - Missing or invalid authentication token
    UnprocessableEntity:
      content:
        application/json:
          example:
            errors:
            - detail: Email must be a valid email address
              source:
                pointer: /data/attributes/email
              status: "422"
              title: Validation Error
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unprocessable Entity - Validation errors
  schemas:
    Action:
      example:
        action_name: example action_name
        action_schema: example action_schema
        created_at: 2024-01-15T09:30:00Z
        instance_optional: true
        label: example label
        reference_id: example reference_id
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        action_name:
          description: The internal identifier for the action that forms part of the
            composite primary key along with world_id. This indexed field enables
            quick lookups of actions by name.
          type: string
        action_schema:
          description: The JSON schema defining the structure, input fields, validations,
            and outcome configurations for this action. Excluded from API responses
            due to its internal technical nature.
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        instance_optional:
          default: "true"
          description: Determines whether this action requires a specific instance
            to operate on. When true, the action can be executed at the entity level
            without selecting a particular record.
          type: boolean
        label:
          description: A human-readable display name for the action shown in user
            interfaces. This field is indexed to facilitate filtering and searching
            actions by their display names.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - action_name
      - label
      - instance_optional
      - action_schema
      type: object
    ActionResponse:
      description: |-
        Response from an action execution. Actions return an array of responses, each directing the client to perform specific operations.

        ## Response Types

        ### client.notify
        Displays a notification message to the user.
        - **type**: "success" | "error" | "info" | "warning"
        - **title**: Notification title
        - **message**: Detailed message

        ### client.redirect
        Redirects the browser to a new location.
        - **location**: Target URL or path
        - **delay**: Milliseconds before redirect (optional)
        - **window**: "self" | "new" (optional)

        ### client.file.download
        Triggers a file download.
        - **name**: Filename for download
        - **content**: Base64 encoded file content
        - **contentType**: MIME type
        - **message**: Optional status message

        ### client.token.set / client.store.set
        Stores data in client storage.
        - **key**: Storage key name
        - **value**: Value to store (usually JWT token)
        - **expiry**: Seconds until expiration (optional)

        ### client.cookie.set
        Sets an HTTP cookie.
        - **key**: Cookie name
        - **value**: Cookie value with attributes

        ### client.script.run
        Executes JavaScript in the client.
        - **script**: JavaScript code to execute
      example:
        Attributes:
          message: Action executed successfully
          title: Success
          type: success
        ResponseType: client.notify
      properties:
        Attributes:
          additionalProperties: true
          description: Response-specific attributes. Structure depends on ResponseType
            (see schema description for details).
          examples:
          - message: The action completed successfully
            title: Operation Successful
            type: success
          - delay: 2000
            location: /dashboard
          - content: base64_encoded_content
            contentType: text/csv
            name: export.csv
          type: object
        ResponseType:
          description: The type of response directing client behavior
          enum:
          - client.redirect
          - client.notify
          - client.file.download
          - client.token.set
          - client.cookie.set
          - client.store.set
          - client.script.run
          example: client.notify
          type: string
      required:
      - ResponseType
      - Attributes
      type: object
    AddExchangeOnWorldRequestObject:
      description: |-
        Request schema for the 'Add new data exchange' action. This action operates on world instances and requires 3 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 3 of 3 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        app_key: example_value
        name: example name
        sheet_id: example_value
        world_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        app_key:
          description: |-
            API key or credentials:
            - Provider-specific format
            - Keep confidential
            - Usually JSON for Google
            - Stored encrypted
          type: string
        name:
          description: |-
            Unique identifier for this exchange:
            - Used in logs and UI
            - Cannot contain spaces
            - Must be unique

            Example: "google_sheets_sync"
          type: string
        sheet_id:
          description: |-
            Google Sheets document ID:
            - Found in sheet URL
            - After /d/ and before /edit
            - 44 characters

            Example: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
          type: string
        world_id:
          description: Reference ID of the world instance on which to execute this
            action. This must be a valid UUID of an existing world record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - name
      - sheet_id
      - app_key
      - world_id
      type: object
    BecomeAnAdministratorOnWorldRequestObject:
      description: |-
        Request schema for the 'Become Daptin Administrator' action. This action requires no input parameters and can be executed without specifying an instance.

        **Authentication:** Required (Bearer token) - Can only be invoked when NO admin exists in the system
        **Rate Limiting:** Standard API rate limits apply
        **Idempotent:** No - May have side effects
      example: {}
      properties: {}
      type: object
    Calendar:
      example:
        created_at: 2024-01-15T09:30:00Z
        reference_id: example reference_id
        rpath: example rpath
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        rpath:
          description: The resource path for the calendar item, serving as a unique
            identifier within the calendaring system. Must be unique across all calendar
            resources.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - rpath
      type: object
    Certificate:
      example:
        certificate_pem: example certificate_pem
        created_at: 2024-01-15T09:30:00Z
        generated_at: 2024-01-15T09:30:00Z
        hostname: example hostname
        issuer: example issuer
        private_key_pem: example private_key_pem
        public_key_pem: example public_key_pem
        reference_id: example reference_id
        root_certificate: example root_certificate
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        certificate_pem:
          description: The X.509 certificate in PEM format, containing the public
            key and certificate information. This is the primary certificate data
            used by services.
          nullable: true
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        generated_at:
          description: The timestamp when the certificate was generated. This helps
            track certificate age and can be used to determine when renewal is necessary.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        hostname:
          description: The fully qualified domain name (FQDN) for which this certificate
            is valid. This field is unique and indexed as it serves as the primary
            identifier for certificate lookup.
          type: string
        issuer:
          default: '''self'''
          description: The authority that issued the certificate, such as a Certificate
            Authority (CA) name or 'self' for self-signed certificates. Defaults to
            'self' when not specified.
          type: string
        private_key_pem:
          description: The private key corresponding to the certificate in PEM format,
            stored with encryption for security. This is used for certificate authentication
            and signing operations.
          nullable: true
          type: string
        public_key_pem:
          description: The public key extracted from the certificate in PEM format.
            This is used for encryption and verification operations.
          nullable: true
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        root_certificate:
          description: The root certificate in PEM format, used to establish the chain
            of trust for this certificate. May be null for self-signed certificates
            or when not available.
          nullable: true
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - hostname
      - issuer
      type: object
    CloudStore:
      example:
        created_at: 2024-01-15T09:30:00Z
        credential_name: example credential_name
        name: example name
        reference_id: example reference_id
        root_path: example root_path
        store_parameters: example store_parameters
        store_provider: example store_provider
        store_type: example store_type
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        credential_name:
          description: References the name of a credential record containing authentication
            details for this storage service. Can be null for services that don't
            require authentication.
          nullable: true
          type: string
        name:
          description: A unique identifier for the cloud storage connection that serves
            as the primary reference key. Used in file operations, site configurations,
            and throughout the system.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        root_path:
          description: The base directory path within the storage service where operations
            will be performed. Acts as the starting point for all relative paths used
            with this connection.
          type: string
        store_parameters:
          description: JSON configuration containing additional connection parameters
            specific to the storage provider, such as region, endpoint URLs, timeout
            settings, and retry policies.
          type: string
        store_provider:
          description: Identifies the specific cloud provider or service (e.g., 'aws',
            'gcs', 'Azure Blob Storage', 'local') used for this storage connection.
          type: string
        store_type:
          description: Categorizes the storage service by type (e.g., 'local', 'cloud'),
            defining the general classification of storage architecture used by this
            connection.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - store_type
      - store_provider
      - root_path
      - store_parameters
      type: object
    Collection:
      example:
        created_at: 2024-01-15T09:30:00Z
        description: example description
        name: example name
        reference_id: example reference_id
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        description:
          description: A detailed description of the collection's purpose, contents,
            and other relevant information. Indexed to support searching collections
            by their descriptions.
          type: string
        name:
          description: The name of the collection, which serves as the primary identifier
            for users. This field is indexed to enable quick lookups and filtering
            by collection name.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - description
      type: object
    CreateFolderOnCloudStoreRequestObject:
      description: |-
        Request schema for the 'Create folder on a cloud store' action. This action operates on cloud_store instances and requires 2 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 1 of 2 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        cloud_store_id: 550e8400-e29b-41d4-a716-446655440000
        name: example name
        path: example path
      properties:
        cloud_store_id:
          description: Reference ID of the cloud_store instance on which to execute
            this action. This must be a valid UUID of an existing cloud_store record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        name:
          type: string
        path:
          nullable: true
          type: string
      required:
      - name
      - cloud_store_id
      type: object
    CreateSiteOnCloudStoreRequestObject:
      description: |-
        Request schema for the 'Create new site on this store' action. This action operates on cloud_store instances and requires 3 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 3 of 3 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        cloud_store_id: 550e8400-e29b-41d4-a716-446655440000
        hostname: example hostname
        path: example path
        site_type: example site_type
      properties:
        cloud_store_id:
          description: Reference ID of the cloud_store instance on which to execute
            this action. This must be a valid UUID of an existing cloud_store record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        hostname:
          description: |-
            Domain name for the site:
            - Can be subdomain: "blog.example.com"
            - Or full domain: "example.com"
            - Used for routing and SSL
            - Must be DNS-configured

            Wildcard SSL supported for subdomains.
          type: string
        path:
          description: |-
            Storage path for site files:
            - Relative to cloud storage root
            - Created if doesn't exist
            - Must be unique per site
            - Becomes site identifier

            Example: "sites/blog", "websites/corporate"
          type: string
        site_type:
          description: |-
            Type of site to create:
            - "static" - Plain HTML/CSS/JS files
            - "hugo" - Hugo static site generator
            - "jekyll" - Jekyll for GitHub Pages
            - "gatsby" - Gatsby React framework
            - "next" - Next.js application

            Determines initial template and build process.
          type: string
      required:
      - site_type
      - path
      - hostname
      - cloud_store_id
      type: object
    Credential:
      example:
        content: example content
        created_at: 2024-01-15T09:30:00Z
        name: example name
        reference_id: example reference_id
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        content:
          description: The sensitive credential information stored in encrypted format.
            May contain passwords, API keys, tokens, or other authentication data
            that requires security protection.
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        name:
          description: A human-readable identifier for the credential entry, allowing
            users to recognize the purpose or system associated with these credentials.
            Indexed for quick search and reference.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - content
      type: object
    DataExchange:
      example:
        attributes: example attributes
        created_at: 2024-01-15T09:30:00Z
        name: example name
        options: example options
        reference_id: example reference_id
        source_attributes: example source_attributes
        source_type: example source_type
        target_attributes: example target_attributes
        target_type: example target_type
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        attributes:
          description: JSON mapping of source columns to target columns, defining
            how data fields are transformed, renamed, or modified during the exchange
            process between systems.
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        name:
          description: A unique identifier for the data exchange configuration that
            serves as the primary reference key. This indexed field enables quick
            lookups of specific data exchange processes.
          type: string
        options:
          description: JSON configuration containing additional exchange options like
            error handling, validation rules, scheduling parameters, and behavior
            controls for the data transfer process.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        source_attributes:
          description: JSON configuration specifying details about the data source,
            including connection parameters, authentication credentials, and source-specific
            settings required for data extraction.
          type: string
        source_type:
          description: The type of data source system (e.g., 'database', 'api', 'file',
            'self') that identifies where data will be extracted from and determines
            how source_attributes are interpreted.
          type: string
        target_attributes:
          description: JSON configuration defining the destination for the exchanged
            data, including connection parameters, authentication details, and target-specific
            settings for data loading.
          type: string
        target_type:
          description: The type of destination system (e.g., 'database', 'api', 'gsheet-append')
            that identifies where data will be loaded to and determines how target_attributes
            are interpreted.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - source_attributes
      - source_type
      - target_attributes
      - attributes
      - target_type
      - options
      type: object
    DeleteFileOnSiteRequestObject:
      description: |-
        Request schema for the 'Delete file in the site' action. This action operates on site instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 1 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        path: example path
        site_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        path:
          type: string
        site_id:
          description: Reference ID of the site instance on which to execute this
            action. This must be a valid UUID of an existing site record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - path
      - site_id
      type: object
    DeletePathOnCloudStoreRequestObject:
      description: |-
        Request schema for the 'Delete path on a cloud store' action. This action operates on cloud_store instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 0 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        cloud_store_id: 550e8400-e29b-41d4-a716-446655440000
        path: example path
      properties:
        cloud_store_id:
          description: Reference ID of the cloud_store instance on which to execute
            this action. This must be a valid UUID of an existing cloud_store record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        path:
          nullable: true
          type: string
      required:
      - cloud_store_id
      type: object
    Document:
      example:
        created_at: 2024-01-15T09:30:00Z
        document_extension: example document_extension
        document_name: example document_name
        document_path: example document_path
        mime_type: example mime_type
        reference_id: example reference_id
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        document_extension:
          description: The file extension of the document (e.g., pdf, docx, txt),
            used for file type identification and filtering. Indexed for quick file
            type searches.
          type: string
        document_name:
          description: The name of the document file, used for identification and
            display purposes. This field is indexed for quick searching and retrieval.
          type: string
        document_path:
          description: The file system path or URL where the document is stored. Supports
            paths up to 2000 characters and is indexed for efficient lookup.
          type: string
        mime_type:
          description: The MIME type of the document (e.g., application/pdf, text/plain),
            which identifies the file format. Indexed to support content type filtering.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - document_name
      - document_path
      - document_extension
      - mime_type
      type: object
    DownloadCertificateOnCertificateRequestObject:
      description: |-
        Request schema for the 'Download certificate' action. This action requires only the reference ID of the certificate instance on which to execute it.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes - must specify a valid certificate_id
        **Permissions:** Execute permission on the instance
      example:
        certificate_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        certificate_id:
          description: Reference ID of the certificate instance on which to execute
            this action. This must be a valid UUID of an existing certificate record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - certificate_id
      type: object
    DownloadPublicKeyOnCertificateRequestObject:
      description: |-
        Request schema for the 'Download public key' action. This action requires only the reference ID of the certificate instance on which to execute it.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes - must specify a valid certificate_id
        **Permissions:** Execute permission on the instance
      example:
        certificate_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        certificate_id:
          description: Reference ID of the certificate instance on which to execute
            this action. This must be a valid UUID of an existing certificate record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - certificate_id
      type: object
    DownloadSystemSchemaOnWorldRequestObject:
      description: |-
        Request schema for the 'Download system schema' action. This action requires no input parameters and can be executed without specifying an instance.

        **Authentication:** Required (Bearer token)
        **Rate Limiting:** Standard API rate limits apply
        **Idempotent:** Yes - Safe to retry
      example: {}
      properties: {}
      type: object
    ErrorResponse:
      properties:
        errors:
          items:
            properties:
              code:
                description: An application-specific error code
                example: VALIDATION_ERROR
                type: string
              detail:
                description: A human-readable explanation specific to this occurrence
                example: The email field must be a valid email address
                type: string
              id:
                description: A unique identifier for this particular occurrence of
                  the problem
                type: string
              source:
                properties:
                  parameter:
                    description: String indicating which query parameter caused the
                      error
                    example: filter
                    type: string
                  pointer:
                    description: JSON Pointer to the associated entity in the request
                    example: /data/attributes/email
                    type: string
                type: object
              status:
                description: The HTTP status code applicable to this problem
                example: "400"
                type: string
              title:
                description: A short, human-readable summary of the problem
                example: Validation failed
                type: string
            required:
            - status
            - title
            type: object
          type: array
      required:
      - errors
      type: object
    ExportCsvDataOnWorldRequestObject:
      description: |-
        Request schema for the 'Export CSV data' action. This action operates on world instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** No
        **Required Fields:** 1 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        table_name: example table_name
      properties:
        table_name:
          type: string
      required:
      - table_name
      type: object
    ExportDataOnWorldRequestObject:
      description: |-
        Request schema for the 'Export data for backup' action. This action operates on world instances and requires 4 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** No
        **Required Fields:** 4 of 4 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        columns: name,email,created_at
        format: csv
        include_headers: true
        table_name: customers
      properties:
        columns:
          description: |-
            Comma-separated list of columns to export. Features:
            - Leave empty for all columns
            - Use exact column names
            - Order determines export order
            - Can exclude sensitive columns

            Example: "id,name,email,created_at"
          type: string
        format:
          default: json
          description: |-
            Output format for the exported data:
            - "json" (default) - Structured JSON with relationships
            - "csv" - Comma-separated values for spreadsheets
            - "xlsx" - Excel format with formatting
            - "xml" - Structured XML with schema
            - "pdf" - Formatted report (limited to 1000 rows)
            - "html" - HTML table for web viewing
          type: string
        include_headers:
          description: |-
            Include column names as first row (CSV/Excel only):
            - true (default) - First row contains column names
            - false - Data only, no headers

            Recommended: true for human readability
          type: boolean
        table_name:
          description: |-
            Name of the table to export. Leave empty to export all tables (requires admin permissions).

            Examples: "users", "orders", "products"
          type: string
      required:
      - table_name
      - format
      - columns
      - include_headers
      type: object
    Feed:
      example:
        author_email: example author_email
        author_name: example author_name
        created_at: 2024-01-15T09:30:00Z
        description: example description
        enable: true
        enable_atom: true
        enable_json: true
        enable_rss: true
        feed_name: example feed_name
        link: example link
        page_size: 42
        reference_id: example reference_id
        title: example title
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        author_email:
          default: ''''''
          description: The contact email address of the feed author or administrator,
            used for communication regarding the feed content.
          type: string
        author_name:
          default: ''''''
          description: The name of the feed author or publisher, displayed in feed
            readers to identify the content creator or provider.
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        description:
          description: A detailed description of the feed's content and purpose. This
            text appears in feed readers to help users understand what the feed contains.
          type: string
        enable:
          default: "false"
          description: Controls whether the feed is active and publicly accessible.
            When set to false, the feed is disabled and cannot be accessed by subscribers.
          type: boolean
        enable_atom:
          default: "true"
          description: Determines whether the feed is available in Atom format. When
            enabled, the system generates and serves an Atom version of this feed.
          type: boolean
        enable_json:
          default: "true"
          description: Controls whether the feed is available in JSON Feed format.
            When enabled, the system generates and serves a JSON version of this feed.
          type: boolean
        enable_rss:
          default: "true"
          description: Specifies whether the feed is available in RSS format. When
            enabled, the system generates and serves an RSS version of this feed.
          type: boolean
        feed_name:
          description: A unique identifier for the feed that serves as the primary
            reference key. This name is used in URLs and API calls to identify the
            specific feed resource.
          type: string
        link:
          default: ''''''
          description: The URL to the website or resource associated with this feed.
            This allows users to visit the original source of the content.
          type: string
        page_size:
          default: "1000"
          description: The maximum number of items to include in a single feed response.
            This controls pagination and feed size to optimize loading times and bandwidth
            usage.
          type: number
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        title:
          default: ''''''
          description: The display title of the feed shown to users and subscribers.
            This is the primary human-readable identifier in feed readers and syndication
            services.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - feed_name
      - title
      - description
      - link
      - author_name
      - author_email
      - enable
      - enable_atom
      - enable_json
      - enable_rss
      - page_size
      type: object
    GenerateAcmeCertificateOnCertificateRequestObject:
      description: |-
        Request schema for the 'Generate ACME certificate' action. This action operates on certificate instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 1 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        certificate_id: 550e8400-e29b-41d4-a716-446655440000
        email: admin@example.com
      properties:
        certificate_id:
          description: Reference ID of the certificate instance on which to execute
            this action. This must be a valid UUID of an existing certificate record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        email:
          description: |-
            Contact email for Let's Encrypt notifications. This email will receive:
            - Certificate expiration warnings (30 days before expiry)
            - Renewal notifications
            - Important security announcements

            Must be a valid, monitored email address. Example: "admin@yourdomain.com"
          type: string
      required:
      - email
      - certificate_id
      type: object
    GenerateRandomDataOnWorldRequestObject:
      description: |-
        Request schema for the 'Generate random data' action. This action operates on world instances and requires 2 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** No
        **Required Fields:** 2 of 2 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        count: 100
        table_name: test_users
      properties:
        count:
          description: |-
            Number of random records to generate. Constraints:
            - Minimum: 1
            - Maximum: 10000 (for performance)
            - Recommended: 100-1000 for testing

            Larger values may take significant time.
          type: number
        table_name:
          description: |-
            Target table for generating test data. The table must:
            - Already exist in the system
            - Have a defined schema
            - Not have unique constraints that would conflict

            Example: "test_users", "sample_products"
          type: string
      required:
      - count
      - table_name
      type: object
    GenerateSelfCertificateOnCertificateRequestObject:
      description: |-
        Request schema for the 'Generate Self certificate' action. This action requires only the reference ID of the certificate instance on which to execute it.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes - must specify a valid certificate_id
        **Permissions:** Execute permission on the instance
      example:
        certificate_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        certificate_id:
          description: Reference ID of the certificate instance on which to execute
            this action. This must be a valid UUID of an existing certificate record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - certificate_id
      type: object
    GetActionSchemaOnActionRequestObject:
      description: |-
        Request schema for the 'Get Action Schema' action. This action requires only the reference ID of the action instance on which to execute it.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes - must specify a valid action_id
        **Permissions:** Execute permission on the instance
      example:
        action_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        action_id:
          description: Reference ID of the action instance on which to execute this
            action. This must be a valid UUID of an existing action record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - action_id
      type: object
    GetFileOnSiteRequestObject:
      description: |-
        Request schema for the 'Get file at the path in site' action. This action operates on site instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 1 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        path: example path
        site_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        path:
          type: string
        site_id:
          description: Reference ID of the site instance on which to execute this
            action. This must be a valid UUID of an existing site record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - path
      - site_id
      type: object
    ImportDataOnWorldRequestObject:
      description: |-
        Request schema for the 'Import data from dump' action. This action operates on world instances and requires 3 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 3 of 3 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        batch_size: 10
        dump_file: example_value
        truncate_before_insert: true
        world_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        batch_size:
          description: |-
            Records processed per database transaction:
            - Default: 100
            - Range: 10-1000
            - Larger batches: Faster but risk losing more on error
            - Smaller batches: Slower but safer

            Adjust based on data complexity and reliability needs.
          type: number
        dump_file:
          description: |-
            File containing data to import. Supported formats:
            - JSON (.json) - Single object or array
            - CSV (.csv) - With or without headers
            - Excel (.xlsx, .xls) - First sheet used
            - YAML (.yml, .yaml) - Structured data
            - TOML (.toml) - Configuration format
            - HCL (.hcl) - HashiCorp configuration

            File size limit: 100MB
          type: string
        truncate_before_insert:
          description: |-
            ⚠️ CAUTION: Delete existing data before import:
            - true - Clear all existing records first
            - false (default) - Append to existing data

            WARNING: true will permanently delete all current data!
          type: boolean
        world_id:
          description: Reference ID of the world instance on which to execute this
            action. This must be a valid UUID of an existing world record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - dump_file
      - truncate_before_insert
      - batch_size
      - world_id
      type: object
    ImportFilesFromStoreOnWorldRequestObject:
      description: |-
        Request schema for the 'Import files data to a table' action. This action operates on world instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 1 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        table_name: documents
        world_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        table_name:
          description: |-
            The name of the database table where file metadata will be imported. The table must:
            - Already exist in the system
            - Have at least one file-type column configured with cloud storage
            - Have appropriate permissions for the current user

            Example: "documents", "media_files", "attachments"
          type: string
        world_id:
          description: Reference ID of the world instance on which to execute this
            action. This must be a valid UUID of an existing world record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - table_name
      - world_id
      type: object
    IncludedRelationship:
      description: Relationship object following JSON:API specification
      properties:
        data:
          oneOf:
          - $ref: '#/components/schemas/RelatedStructure'
            description: Single related resource (has_one/belongs_to)
          - description: Multiple related resources (has_many)
            items:
              $ref: '#/components/schemas/RelatedStructure'
            type: array
        links:
          description: Links to fetch or manipulate the relationship
          properties:
            related:
              description: URL to fetch the related resource(s)
              example: /api/posts/123/author
              format: uri
              type: string
            self:
              description: URL to fetch the relationship itself
              example: /api/posts/123/relationships/author
              format: uri
              type: string
          type: object
        meta:
          additionalProperties: true
          description: Additional metadata about the relationship
          type: object
      type: object
    InstallIntegrationOnIntegrationRequestObject:
      description: |-
        Request schema for the 'Install integration' action. This action requires only the reference ID of the integration instance on which to execute it.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes - must specify a valid integration_id
        **Permissions:** Execute permission on the instance
      example:
        integration_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        integration_id:
          description: Reference ID of the integration instance on which to execute
            this action. This must be a valid UUID of an existing integration record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - integration_id
      type: object
    Integration:
      example:
        authentication_specification: example authentication_specification
        authentication_type: example authentication_type
        created_at: 2024-01-15T09:30:00Z
        enable: true
        name: example name
        reference_id: example reference_id
        specification: example specification
        specification_format: example specification_format
        specification_language: example specification_language
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        authentication_specification:
          description: Encrypted authentication details required to access the integrated
            service, such as API keys, tokens, or credentials. Stored securely with
            encryption.
          type: string
        authentication_type:
          description: The authentication method used for this integration, such as
            'API Key', 'OAuth2', 'Basic Auth', or 'JWT'. This determines how authentication
            credentials are processed.
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        enable:
          default: "true"
          description: Controls whether the integration is active and available for
            use. When set to false, the integration is disabled and will not be executed
            regardless of triggers.
          type: boolean
        name:
          description: A unique identifier for the integration that serves as the
            primary reference key. Used in logs, API calls, and internal references
            to identify this specific integration.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        specification:
          description: The actual integration specification document that defines
            the API endpoints, operations, parameters, and other technical details
            of the integration.
          type: string
        specification_format:
          default: '''json'''
          description: The file format of the specification document, typically 'json',
            'yaml', or 'xml'. Defaults to 'json' when not explicitly specified.
          type: string
        specification_language:
          description: The language or format used to define the integration specification,
            such as 'OpenAPI', 'GraphQL', 'WSDL', or custom formats. This determines
            how the specification is interpreted.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - specification_language
      - specification_format
      - specification
      - authentication_type
      - authentication_specification
      - enable
      type: object
    JsonSchema:
      example:
        created_at: 2024-01-15T09:30:00Z
        json_schema: example json_schema
        reference_id: example reference_id
        schema_name: example schema_name
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        json_schema:
          description: The actual JSON Schema document stored as a JSON text field.
            Contains schema definitions including data types, validation rules, property
            constraints, and other schema specifications.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        schema_name:
          description: A unique identifier for the JSON schema stored in the system.
            This name is used to reference and retrieve specific schemas for validation
            and documentation purposes.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - schema_name
      - json_schema
      type: object
    ListFilesOnSiteRequestObject:
      description: |-
        Request schema for the 'List files in the site path' action. This action operates on site instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 1 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        path: example path
        site_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        path:
          type: string
        site_id:
          description: Reference ID of the site instance on which to execute this
            action. This must be a valid UUID of an existing site record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - path
      - site_id
      type: object
    Mail:
      example:
        body: example body
        content_type: example content_type
        created_at: 2024-01-15T09:30:00Z
        deleted: true
        flags: example flags
        from_address: example from_address
        has_attachment: true
        hash: example hash
        internal_date: 2024-01-15T09:30:00Z
        ip_addr: example ip_addr
        is_tls: true
        mail: example mail
        mail_id: example mail_id
        message_id: example message_id
        recent: true
        recipient: example recipient
        reference_id: example reference_id
        reply_to_address: example reply_to_address
        return_path: example return_path
        seen: true
        sender_address: example sender_address
        size: example size
        spam: true
        spam_score: 42
        subject: example subject
        to_address: example to_address
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        body:
          type: string
        content_type:
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        deleted:
          default: "false"
          type: boolean
        flags:
          type: string
        from_address:
          type: string
        has_attachment:
          default: "false"
          type: boolean
        hash:
          type: string
        internal_date:
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        ip_addr:
          type: string
        is_tls:
          default: "false"
          type: boolean
        mail:
          type: string
        mail_id:
          type: string
        message_id:
          type: string
        recent:
          default: "true"
          type: boolean
        recipient:
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        reply_to_address:
          type: string
        return_path:
          type: string
        seen:
          default: "false"
          type: boolean
        sender_address:
          type: string
        size:
          type: string
        spam:
          default: "false"
          type: boolean
        spam_score:
          type: number
        subject:
          type: string
        to_address:
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - message_id
      - mail_id
      - from_address
      - internal_date
      - to_address
      - reply_to_address
      - sender_address
      - subject
      - body
      - mail
      - spam_score
      - hash
      - content_type
      - recipient
      - has_attachment
      - ip_addr
      - return_path
      - is_tls
      - seen
      - recent
      - deleted
      - spam
      - size
      - flags
      type: object
    MailAccount:
      example:
        created_at: 2024-01-15T09:30:00Z
        password: example password
        password_md5: example password_md5
        reference_id: example reference_id
        updated_at: 2024-01-15T09:30:00Z
        username: example username
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        password:
          format: password
          type: string
          writeOnly: true
        password_md5:
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        username:
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - username
      - password
      - password_md5
      type: object
    MailBox:
      example:
        attributes: example attributes
        created_at: 2024-01-15T09:30:00Z
        flags: example flags
        name: example name
        nextuid: example nextuid
        permanent_flags: example permanent_flags
        reference_id: example reference_id
        subscribed: true
        uidvalidity: example uidvalidity
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        attributes:
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        flags:
          type: string
        name:
          type: string
        nextuid:
          default: "1"
          type: string
        permanent_flags:
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        subscribed:
          default: "true"
          type: boolean
        uidvalidity:
          default: "1"
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - subscribed
      - uidvalidity
      - nextuid
      - attributes
      - flags
      - permanent_flags
      type: object
    MailServer:
      example:
        always_on_tls: true
        authentication_required: true
        created_at: 2024-01-15T09:30:00Z
        hostname: example hostname
        is_enabled: true
        listen_interface: example listen_interface
        max_clients: 42
        max_size: 42
        reference_id: example reference_id
        updated_at: 2024-01-15T09:30:00Z
        version: 42
        xclient_on: true
      properties:
        always_on_tls:
          default: "true"
          type: boolean
        authentication_required:
          default: "true"
          type: boolean
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        hostname:
          type: string
        is_enabled:
          default: "false"
          type: boolean
        listen_interface:
          default: '''0.0.0.0:465'''
          type: string
        max_clients:
          default: "20"
          type: number
        max_size:
          default: "10000"
          type: number
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
        xclient_on:
          default: "false"
          type: boolean
      required:
      - hostname
      - is_enabled
      - listen_interface
      - max_size
      - max_clients
      - xclient_on
      - always_on_tls
      - authentication_required
      type: object
    MovePathOnCloudStoreRequestObject:
      description: |-
        Request schema for the 'Create folder on a cloud store' action. This action operates on cloud_store instances and requires 2 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 2 of 2 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        cloud_store_id: 550e8400-e29b-41d4-a716-446655440000
        destination: example destination
        source: example source
      properties:
        cloud_store_id:
          description: Reference ID of the cloud_store instance on which to execute
            this action. This must be a valid UUID of an existing cloud_store record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        destination:
          type: string
        source:
          type: string
      required:
      - source
      - destination
      - cloud_store_id
      type: object
    NewAction:
      properties:
        action_name:
          description: The internal identifier for the action that forms part of the
            composite primary key along with world_id. This indexed field enables
            quick lookups of actions by name.
          type: string
        action_schema:
          description: The JSON schema defining the structure, input fields, validations,
            and outcome configurations for this action. Excluded from API responses
            due to its internal technical nature.
          type: string
        instance_optional:
          default: "true"
          description: Determines whether this action requires a specific instance
            to operate on. When true, the action can be executed at the entity level
            without selecting a particular record.
          type: boolean
        label:
          description: A human-readable display name for the action shown in user
            interfaces. This field is indexed to facilitate filtering and searching
            actions by their display names.
          type: string
      required:
      - action_name
      - label
      - action_schema
      type: object
    NewCalendar:
      properties:
        rpath:
          description: The resource path for the calendar item, serving as a unique
            identifier within the calendaring system. Must be unique across all calendar
            resources.
          type: string
      required:
      - rpath
      type: object
    NewCertificate:
      properties:
        certificate_pem:
          description: The X.509 certificate in PEM format, containing the public
            key and certificate information. This is the primary certificate data
            used by services.
          nullable: true
          type: string
        generated_at:
          description: The timestamp when the certificate was generated. This helps
            track certificate age and can be used to determine when renewal is necessary.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        hostname:
          description: The fully qualified domain name (FQDN) for which this certificate
            is valid. This field is unique and indexed as it serves as the primary
            identifier for certificate lookup.
          type: string
        issuer:
          default: '''self'''
          description: The authority that issued the certificate, such as a Certificate
            Authority (CA) name or 'self' for self-signed certificates. Defaults to
            'self' when not specified.
          type: string
        private_key_pem:
          description: The private key corresponding to the certificate in PEM format,
            stored with encryption for security. This is used for certificate authentication
            and signing operations.
          nullable: true
          type: string
        public_key_pem:
          description: The public key extracted from the certificate in PEM format.
            This is used for encryption and verification operations.
          nullable: true
          type: string
        root_certificate:
          description: The root certificate in PEM format, used to establish the chain
            of trust for this certificate. May be null for self-signed certificates
            or when not available.
          nullable: true
          type: string
      required:
      - hostname
      type: object
    NewCloudStore:
      properties:
        credential_name:
          description: References the name of a credential record containing authentication
            details for this storage service. Can be null for services that don't
            require authentication.
          nullable: true
          type: string
        name:
          description: A unique identifier for the cloud storage connection that serves
            as the primary reference key. Used in file operations, site configurations,
            and throughout the system.
          type: string
        root_path:
          description: The base directory path within the storage service where operations
            will be performed. Acts as the starting point for all relative paths used
            with this connection.
          type: string
        store_parameters:
          description: JSON configuration containing additional connection parameters
            specific to the storage provider, such as region, endpoint URLs, timeout
            settings, and retry policies.
          type: string
        store_provider:
          description: Identifies the specific cloud provider or service (e.g., 'aws',
            'gcs', 'Azure Blob Storage', 'local') used for this storage connection.
          type: string
        store_type:
          description: Categorizes the storage service by type (e.g., 'local', 'cloud'),
            defining the general classification of storage architecture used by this
            connection.
          type: string
      required:
      - name
      - store_type
      - store_provider
      - root_path
      - store_parameters
      type: object
    NewCollection:
      properties:
        description:
          description: A detailed description of the collection's purpose, contents,
            and other relevant information. Indexed to support searching collections
            by their descriptions.
          type: string
        name:
          description: The name of the collection, which serves as the primary identifier
            for users. This field is indexed to enable quick lookups and filtering
            by collection name.
          type: string
      required:
      - name
      - description
      type: object
    NewCredential:
      properties:
        content:
          description: The sensitive credential information stored in encrypted format.
            May contain passwords, API keys, tokens, or other authentication data
            that requires security protection.
          type: string
        name:
          description: A human-readable identifier for the credential entry, allowing
            users to recognize the purpose or system associated with these credentials.
            Indexed for quick search and reference.
          type: string
      required:
      - name
      - content
      type: object
    NewDataExchange:
      properties:
        attributes:
          description: JSON mapping of source columns to target columns, defining
            how data fields are transformed, renamed, or modified during the exchange
            process between systems.
          type: string
        name:
          description: A unique identifier for the data exchange configuration that
            serves as the primary reference key. This indexed field enables quick
            lookups of specific data exchange processes.
          type: string
        options:
          description: JSON configuration containing additional exchange options like
            error handling, validation rules, scheduling parameters, and behavior
            controls for the data transfer process.
          type: string
        source_attributes:
          description: JSON configuration specifying details about the data source,
            including connection parameters, authentication credentials, and source-specific
            settings required for data extraction.
          type: string
        source_type:
          description: The type of data source system (e.g., 'database', 'api', 'file',
            'self') that identifies where data will be extracted from and determines
            how source_attributes are interpreted.
          type: string
        target_attributes:
          description: JSON configuration defining the destination for the exchanged
            data, including connection parameters, authentication details, and target-specific
            settings for data loading.
          type: string
        target_type:
          description: The type of destination system (e.g., 'database', 'api', 'gsheet-append')
            that identifies where data will be loaded to and determines how target_attributes
            are interpreted.
          type: string
      required:
      - name
      - source_attributes
      - source_type
      - target_attributes
      - attributes
      - target_type
      - options
      type: object
    NewDocument:
      properties:
        document_extension:
          description: The file extension of the document (e.g., pdf, docx, txt),
            used for file type identification and filtering. Indexed for quick file
            type searches.
          type: string
        document_name:
          description: The name of the document file, used for identification and
            display purposes. This field is indexed for quick searching and retrieval.
          type: string
        document_path:
          description: The file system path or URL where the document is stored. Supports
            paths up to 2000 characters and is indexed for efficient lookup.
          type: string
        mime_type:
          description: The MIME type of the document (e.g., application/pdf, text/plain),
            which identifies the file format. Indexed to support content type filtering.
          type: string
      required:
      - document_name
      - document_path
      - document_extension
      - mime_type
      type: object
    NewFeed:
      properties:
        author_email:
          default: ''''''
          description: The contact email address of the feed author or administrator,
            used for communication regarding the feed content.
          type: string
        author_name:
          default: ''''''
          description: The name of the feed author or publisher, displayed in feed
            readers to identify the content creator or provider.
          type: string
        description:
          description: A detailed description of the feed's content and purpose. This
            text appears in feed readers to help users understand what the feed contains.
          type: string
        enable:
          default: "false"
          description: Controls whether the feed is active and publicly accessible.
            When set to false, the feed is disabled and cannot be accessed by subscribers.
          type: boolean
        enable_atom:
          default: "true"
          description: Determines whether the feed is available in Atom format. When
            enabled, the system generates and serves an Atom version of this feed.
          type: boolean
        enable_json:
          default: "true"
          description: Controls whether the feed is available in JSON Feed format.
            When enabled, the system generates and serves a JSON version of this feed.
          type: boolean
        enable_rss:
          default: "true"
          description: Specifies whether the feed is available in RSS format. When
            enabled, the system generates and serves an RSS version of this feed.
          type: boolean
        feed_name:
          description: A unique identifier for the feed that serves as the primary
            reference key. This name is used in URLs and API calls to identify the
            specific feed resource.
          type: string
        link:
          default: ''''''
          description: The URL to the website or resource associated with this feed.
            This allows users to visit the original source of the content.
          type: string
        page_size:
          default: "1000"
          description: The maximum number of items to include in a single feed response.
            This controls pagination and feed size to optimize loading times and bandwidth
            usage.
          type: number
        title:
          default: ''''''
          description: The display title of the feed shown to users and subscribers.
            This is the primary human-readable identifier in feed readers and syndication
            services.
          type: string
      required:
      - feed_name
      - description
      type: object
    NewIntegration:
      properties:
        authentication_specification:
          description: Encrypted authentication details required to access the integrated
            service, such as API keys, tokens, or credentials. Stored securely with
            encryption.
          type: string
        authentication_type:
          description: The authentication method used for this integration, such as
            'API Key', 'OAuth2', 'Basic Auth', or 'JWT'. This determines how authentication
            credentials are processed.
          type: string
        enable:
          default: "true"
          description: Controls whether the integration is active and available for
            use. When set to false, the integration is disabled and will not be executed
            regardless of triggers.
          type: boolean
        name:
          description: A unique identifier for the integration that serves as the
            primary reference key. Used in logs, API calls, and internal references
            to identify this specific integration.
          type: string
        specification:
          description: The actual integration specification document that defines
            the API endpoints, operations, parameters, and other technical details
            of the integration.
          type: string
        specification_format:
          default: '''json'''
          description: The file format of the specification document, typically 'json',
            'yaml', or 'xml'. Defaults to 'json' when not explicitly specified.
          type: string
        specification_language:
          description: The language or format used to define the integration specification,
            such as 'OpenAPI', 'GraphQL', 'WSDL', or custom formats. This determines
            how the specification is interpreted.
          type: string
      required:
      - name
      - specification_language
      - specification
      - authentication_type
      - authentication_specification
      type: object
    NewJsonSchema:
      properties:
        json_schema:
          description: The actual JSON Schema document stored as a JSON text field.
            Contains schema definitions including data types, validation rules, property
            constraints, and other schema specifications.
          type: string
        schema_name:
          description: A unique identifier for the JSON schema stored in the system.
            This name is used to reference and retrieve specific schemas for validation
            and documentation purposes.
          type: string
      required:
      - schema_name
      - json_schema
      type: object
    NewMail:
      properties:
        body:
          type: string
        content_type:
          type: string
        deleted:
          default: "false"
          type: boolean
        flags:
          type: string
        from_address:
          type: string
        has_attachment:
          default: "false"
          type: boolean
        hash:
          type: string
        internal_date:
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        ip_addr:
          type: string
        is_tls:
          default: "false"
          type: boolean
        mail:
          type: string
        mail_id:
          type: string
        message_id:
          type: string
        recent:
          default: "true"
          type: boolean
        recipient:
          type: string
        reply_to_address:
          type: string
        return_path:
          type: string
        seen:
          default: "false"
          type: boolean
        sender_address:
          type: string
        size:
          type: string
        spam:
          default: "false"
          type: boolean
        spam_score:
          type: number
        subject:
          type: string
        to_address:
          type: string
      required:
      - message_id
      - mail_id
      - from_address
      - internal_date
      - to_address
      - reply_to_address
      - sender_address
      - subject
      - body
      - mail
      - spam_score
      - hash
      - content_type
      - recipient
      - ip_addr
      - return_path
      - size
      - flags
      type: object
    NewMailAccount:
      properties:
        password:
          format: password
          type: string
          writeOnly: true
        password_md5:
          type: string
        username:
          type: string
      required:
      - username
      - password
      - password_md5
      type: object
    NewMailBox:
      properties:
        attributes:
          type: string
        flags:
          type: string
        name:
          type: string
        nextuid:
          default: "1"
          type: string
        permanent_flags:
          type: string
        subscribed:
          default: "true"
          type: boolean
        uidvalidity:
          default: "1"
          type: string
      required:
      - name
      - attributes
      - flags
      - permanent_flags
      type: object
    NewMailServer:
      properties:
        always_on_tls:
          default: "true"
          type: boolean
        authentication_required:
          default: "true"
          type: boolean
        hostname:
          type: string
        is_enabled:
          default: "false"
          type: boolean
        listen_interface:
          default: '''0.0.0.0:465'''
          type: string
        max_clients:
          default: "20"
          type: number
        max_size:
          default: "10000"
          type: number
        xclient_on:
          default: "false"
          type: boolean
      required:
      - hostname
      type: object
    NewOauthConnect:
      properties:
        access_type_offline:
          default: "false"
          description: Determines whether to request refresh tokens for offline access
            to resources. When enabled, the application can access resources even
            when the user is not present.
          type: boolean
        allow_login:
          default: "false"
          description: Controls whether this OAuth connection can be used for user
            authentication and login. When enabled, users can sign in using this OAuth
            provider.
          type: boolean
        auth_url:
          default: '''https://accounts.google.com/o/oauth2/auth'''
          description: The OAuth provider's authorization endpoint URL where users
            are redirected to authenticate. Defaults to Google's OAuth authorization
            endpoint.
          example: https://example.com
          format: uri
          type: string
        client_id:
          description: The OAuth client identifier issued by the authentication provider
            when registering the application. This is used to identify the application
            to the OAuth service.
          type: string
        client_secret:
          description: The confidential OAuth client secret issued by the authentication
            provider, stored with encryption for security. Used with the client_id
            to authenticate the application.
          type: string
        name:
          description: A unique identifier for the OAuth connection that serves as
            the primary reference key. This indexed field allows for quick lookup
            of specific OAuth provider configurations.
          type: string
        profile_email_path:
          default: '''email'''
          description: The JSON path to extract the user's email from the profile
            response. Specifies where to find the email address in the provider's
            user profile data structure.
          type: string
        profile_url:
          default: '''https://www.googleapis.com/oauth2/v1/userinfo?alt=json'''
          description: The URL to fetch user profile information after authentication,
            used for user creation or profile updates. Defaults to Google's user info
            endpoint.
          example: https://example.com
          format: uri
          type: string
        redirect_uri:
          default: '''/oauth/response'''
          description: The URL to which the OAuth provider will redirect users after
            authentication, sending authorization codes or tokens. Defaults to '/oauth/response'.
          example: https://example.com
          format: uri
          type: string
        response_type:
          default: '''code'''
          description: The OAuth response type expected from the authorization server,
            typically 'code' for authorization code flow or 'token' for implicit flow.
            Defaults to 'code'.
          type: string
        scope:
          default: '''https://www.googleapis.com/auth/spreadsheets'''
          description: The OAuth permission scopes requested for this connection,
            defining what resources and operations the application can access. Defaults
            to Google Sheets access scope.
          type: string
        token_url:
          default: '''https://accounts.google.com/o/oauth2/token'''
          description: The OAuth provider's token endpoint URL used to exchange authorization
            codes for access tokens. Defaults to Google's OAuth token endpoint.
          example: https://example.com
          format: uri
          type: string
      required:
      - name
      - client_id
      - client_secret
      type: object
    NewOauthToken:
      properties:
        access_token:
          description: The encrypted OAuth access token used to authenticate API requests
            to the provider. This token is stored securely and used for authorized
            access to protected resources.
          type: string
        expires_in:
          description: The lifetime of the access token in seconds, indicating when
            the token will expire and require renewal. Used to determine when refresh
            operations should be triggered.
          type: number
        refresh_token:
          description: The encrypted OAuth refresh token used to obtain new access
            tokens when they expire. This long-lived token enables continuous access
            without user re-authentication.
          type: string
        token_type:
          description: The type of access token issued by the OAuth provider, typically
            'Bearer'. This determines how the token should be included in subsequent
            API authorization headers.
          type: string
      required:
      - access_token
      - expires_in
      - refresh_token
      - token_type
      type: object
    NewOutbox:
      properties:
        from_address:
          type: string
        mail:
          type: string
        sent:
          default: "false"
          type: boolean
        to_address:
          type: string
        to_host:
          type: string
      required:
      - from_address
      - to_address
      - to_host
      - mail
      type: object
    NewSite:
      properties:
        enable:
          default: "true"
          type: boolean
        ftp_enabled:
          default: "false"
          type: boolean
        hostname:
          type: string
        name:
          type: string
        path:
          description: path on the cloud store to host as base directory
          type: string
        site_type:
          default: '''static'''
          type: string
      required:
      - name
      - hostname
      - path
      type: object
    NewSmd:
      properties:
        events:
          type: string
        initial_state:
          type: string
        label:
          type: string
        name:
          type: string
      required:
      - name
      - label
      - initial_state
      - events
      type: object
    NewStream:
      properties:
        enable:
          default: "true"
          type: boolean
        stream_contract:
          type: string
        stream_name:
          type: string
      required:
      - stream_name
      - stream_contract
      type: object
    NewTask:
      properties:
        action_name:
          description: The name of the action to be executed when this task runs.
            References an action defined in the system that contains the implementation
            logic.
          type: string
        active:
          description: Indicates whether the task is currently active and should be
            executed according to its schedule. Inactive tasks are not run regardless
            of their schedule.
          type: boolean
        attributes:
          description: A JSON object containing additional parameters, settings, and
            configuration options specific to this task. These attributes are passed
            to the action when executed.
          type: string
        entity_name:
          description: The name of the data entity or resource type that this task
            operates on. This determines the context and scope of the task's execution.
          type: string
        job_type:
          description: Categorizes the task by type of job (e.g., 'backup', 'sync',
            'report', 'maintenance'), allowing for filtering and grouping related
            tasks.
          type: string
        name:
          description: A descriptive name for the task that serves as the primary
            user-facing identifier. This field is indexed to support efficient searching
            and sorting of tasks.
          type: string
        schedule:
          description: The execution schedule for the task, typically defined as a
            cron expression or time interval pattern. Controls when and how frequently
            the task runs.
          type: string
      required:
      - name
      - action_name
      - entity_name
      - schedule
      - active
      - attributes
      - job_type
      type: object
    NewTemplate:
      properties:
        action_config:
          default: '''{}'''
          description: JSON configuration for actions that can be performed on or
            with this template, such as pre-processing, post-processing, or conditional
            rendering logic.
          nullable: true
          type: string
        cache_config:
          default: '''{}'''
          description: JSON configuration for caching behavior, including cache duration,
            invalidation rules, and cache storage options to optimize performance.
          nullable: true
          type: string
        content:
          description: The actual template content, which may include HTML, text with
            placeholders, or template language syntax that will be processed when
            the template is rendered.
          type: string
        headers:
          description: JSON object containing additional HTTP headers to be included
            when serving content generated from this template. Used for custom headers
            beyond content type.
          nullable: true
          type: string
        mime_type:
          description: The MIME type of the content this template generates, such
            as 'text/html', 'application/json', or 'text/plain'. Used for HTTP response
            headers.
          type: string
        name:
          description: A unique identifier for the template that serves as the primary
            reference key. Used in code, URLs, and API calls to identify specific
            templates.
          type: string
        url_pattern:
          description: JSON definition of URL patterns that map to this template,
            enabling dynamic routing and parameter extraction from request URLs.
          type: string
      required:
      - name
      - content
      - mime_type
      - url_pattern
      type: object
    NewTimeline:
      properties:
        event_type:
          description: Categorizes the timeline event by type (e.g., 'create', 'update',
            'delete', 'login'), allowing for filtering and grouping related events
            in chronological sequences.
          type: string
        payload:
          description: Additional data or context related to the event, stored as
            text content. May contain JSON, XML, or plaintext details that provide
            comprehensive information about what occurred.
          nullable: true
          type: string
        title:
          description: A concise summary of the event displayed to users when viewing
            the timeline. This field is indexed to enable efficient timeline searches
            and filtering by event title.
          type: string
      required:
      - event_type
      - title
      type: object
    NewUserAccount:
      properties:
        confirmed:
          default: "false"
          description: Indicates whether the user has confirmed their account, typically
            through email verification. Defaults to false until the confirmation process
            is completed.
          type: boolean
        email:
          description: The primary email address of the user, serving as a unique
            identifier for authentication and communication. This field is indexed
            and must be unique across all users.
          example: user@example.com
          format: email
          type: string
        name:
          description: The display name of the user, used for identification in the
            UI and communications. This field is indexed to support quick user lookups
            and searching by name.
          type: string
        password:
          description: The user's password stored in a secure hashed format. This
            field is nullable to support alternative authentication methods like OAuth
            or OTP.
          format: password
          nullable: true
          type: string
          writeOnly: true
      required:
      - name
      - email
      type: object
    NewUserOtpAccount:
      properties:
        mobile_number:
          description: The user's mobile phone number used for receiving OTP (One-Time
            Password) messages. This field is indexed to enable quick lookups for
            verification and authentication processes.
          nullable: true
          type: string
        otp_secret:
          description: The encrypted secret key used to generate OTP (One-Time Password)
            codes for this account. This sensitive field is indexed for authentication
            lookups but excluded from API responses.
          type: string
        verified:
          default: "false"
          description: Indicates whether the user's OTP account has been successfully
            verified through a validation process. Defaults to false until verification
            is completed.
          type: boolean
      required:
      - otp_secret
      type: object
    NewUsergroup:
      properties:
        name:
          description: A unique identifier for the user group that serves as the primary
            reference key. This indexed field ensures groups have distinct names for
            clear identification in permission assignments and user management.
          type: string
      required:
      - name
      type: object
    NewWorld:
      properties:
        default_order:
          default: '''+id'''
          description: A string defining the default sorting order for records in
            this table. Uses a format like '+column' for ascending or '-column' for
            descending sort, defaulting to '+id'.
          nullable: true
          type: string
        default_permission:
          default: "644"
          description: An integer representing the default Unix-style permission setting
            (e.g., 644) that controls the base access rights for records in this table
            for various user roles.
          type: string
        icon:
          default: '''fa-star'''
          description: The Font Awesome icon identifier used to represent this entity
            in the user interface. Provides visual identification of entity types
            in lists and navigation elements.
          nullable: true
          type: string
        is_hidden:
          default: "false"
          description: Controls the visibility of this entity in user interfaces and
            API documentation. When set to true, the entity exists but is not displayed
            in standard listings.
          type: boolean
        is_join_table:
          default: "false"
          description: Specifies whether this table serves as a many-to-many join
            table between other entities. Join tables typically contain primarily
            foreign key references to related entities.
          type: boolean
        is_state_tracking_enabled:
          default: "false"
          description: Determines whether state transitions for records in this table
            are tracked and logged. When enabled, the system maintains a history of
            status changes over time.
          type: boolean
        is_top_level:
          default: "true"
          description: Indicates whether this entity appears at the top level of the
            data hierarchy in the system. Top-level entities are directly accessible
            via API endpoints and user interfaces.
          type: boolean
        table_name:
          description: The name of the database table this world entity represents.
            This is a unique, indexed identifier used throughout the system to reference
            specific data models.
          type: string
        world_schema_json:
          description: A JSON representation of the complete schema for this world
            entity, including all columns, relationships, validations, and other metadata
            needed to define the data model.
          type: string
      required:
      - table_name
      - world_schema_json
      type: object
    OauthConnect:
      example:
        access_type_offline: true
        allow_login: true
        auth_url: https://example.com
        client_id: example client_id
        client_secret: example client_secret
        created_at: 2024-01-15T09:30:00Z
        name: example name
        profile_email_path: example profile_email_path
        profile_url: https://example.com
        redirect_uri: https://example.com
        reference_id: example reference_id
        response_type: example response_type
        scope: example scope
        token_url: https://example.com
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        access_type_offline:
          default: "false"
          description: Determines whether to request refresh tokens for offline access
            to resources. When enabled, the application can access resources even
            when the user is not present.
          type: boolean
        allow_login:
          default: "false"
          description: Controls whether this OAuth connection can be used for user
            authentication and login. When enabled, users can sign in using this OAuth
            provider.
          type: boolean
        auth_url:
          default: '''https://accounts.google.com/o/oauth2/auth'''
          description: The OAuth provider's authorization endpoint URL where users
            are redirected to authenticate. Defaults to Google's OAuth authorization
            endpoint.
          example: https://example.com
          format: uri
          type: string
        client_id:
          description: The OAuth client identifier issued by the authentication provider
            when registering the application. This is used to identify the application
            to the OAuth service.
          type: string
        client_secret:
          description: The confidential OAuth client secret issued by the authentication
            provider, stored with encryption for security. Used with the client_id
            to authenticate the application.
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        name:
          description: A unique identifier for the OAuth connection that serves as
            the primary reference key. This indexed field allows for quick lookup
            of specific OAuth provider configurations.
          type: string
        profile_email_path:
          default: '''email'''
          description: The JSON path to extract the user's email from the profile
            response. Specifies where to find the email address in the provider's
            user profile data structure.
          type: string
        profile_url:
          default: '''https://www.googleapis.com/oauth2/v1/userinfo?alt=json'''
          description: The URL to fetch user profile information after authentication,
            used for user creation or profile updates. Defaults to Google's user info
            endpoint.
          example: https://example.com
          format: uri
          type: string
        redirect_uri:
          default: '''/oauth/response'''
          description: The URL to which the OAuth provider will redirect users after
            authentication, sending authorization codes or tokens. Defaults to '/oauth/response'.
          example: https://example.com
          format: uri
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        response_type:
          default: '''code'''
          description: The OAuth response type expected from the authorization server,
            typically 'code' for authorization code flow or 'token' for implicit flow.
            Defaults to 'code'.
          type: string
        scope:
          default: '''https://www.googleapis.com/auth/spreadsheets'''
          description: The OAuth permission scopes requested for this connection,
            defining what resources and operations the application can access. Defaults
            to Google Sheets access scope.
          type: string
        token_url:
          default: '''https://accounts.google.com/o/oauth2/token'''
          description: The OAuth provider's token endpoint URL used to exchange authorization
            codes for access tokens. Defaults to Google's OAuth token endpoint.
          example: https://example.com
          format: uri
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - client_id
      - client_secret
      - scope
      - response_type
      - redirect_uri
      - auth_url
      - token_url
      - profile_url
      - profile_email_path
      - allow_login
      - access_type_offline
      type: object
    OauthLoginBeginOnOauthConnectRequestObject:
      description: |-
        Request schema for the 'Authenticate via OAuth' action. This action requires only the reference ID of the oauth_connect instance on which to execute it.

        **Authentication:** Not required (public endpoint)
        **Instance Required:** Yes - must specify a valid oauth_connect_id
        **Permissions:** Execute permission on the instance
      example:
        oauth_connect_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        oauth_connect_id:
          description: Reference ID of the oauth_connect instance on which to execute
            this action. This must be a valid UUID of an existing oauth_connect record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - oauth_connect_id
      type: object
    OauthToken:
      example:
        access_token: example access_token
        created_at: 2024-01-15T09:30:00Z
        expires_in: 42
        reference_id: example reference_id
        refresh_token: example refresh_token
        token_type: example token_type
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        access_token:
          description: The encrypted OAuth access token used to authenticate API requests
            to the provider. This token is stored securely and used for authorized
            access to protected resources.
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        expires_in:
          description: The lifetime of the access token in seconds, indicating when
            the token will expire and require renewal. Used to determine when refresh
            operations should be triggered.
          type: number
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        refresh_token:
          description: The encrypted OAuth refresh token used to obtain new access
            tokens when they expire. This long-lived token enables continuous access
            without user re-authentication.
          type: string
        token_type:
          description: The type of access token issued by the OAuth provider, typically
            'Bearer'. This determines how the token should be included in subsequent
            API authorization headers.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - access_token
      - expires_in
      - refresh_token
      - token_type
      type: object
    OauthloginresponseOnOauthTokenRequestObject:
      description: |-
        Request schema for the 'Handle OAuth login response code and state' action. This action operates on oauth_token instances and requires 3 input parameter(s) to execute successfully.

        **Authentication:** Not required (public endpoint)
        **Instance Required:** No
        **Required Fields:** 3 of 3 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        authenticator: example_value
        code: example_value
        state: example_value
      properties:
        authenticator:
          type: string
        code:
          type: string
        state:
          type: string
      required:
      - code
      - state
      - authenticator
      type: object
    Outbox:
      example:
        created_at: 2024-01-15T09:30:00Z
        from_address: example from_address
        mail: example mail
        reference_id: example reference_id
        sent: true
        to_address: example to_address
        to_host: example to_host
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        from_address:
          type: string
        mail:
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        sent:
          default: "false"
          type: boolean
        to_address:
          type: string
        to_host:
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - from_address
      - to_address
      - to_host
      - mail
      - sent
      type: object
    Pagination:
      properties:
        page[after]:
          description: Reference id of the object after which to look for
          type: string
        page[number]:
          description: Page number
          type: number
        page[size]:
          description: Number of item to return
          type: number
      type: object
    PaginationStatus:
      properties:
        current_page:
          description: The current page, for pagination
          type: number
        from:
          description: From page
          type: number
        last_page:
          description: The last page number in current query set
          type: number
        per_page:
          description: This is the number of results in one page
          type: number
        to:
          description: Index of the last record fetched in this result
          type: number
        total:
          description: Total number of records
          type: number
      type: object
    RateLimitResponse:
      properties:
        errors:
          items:
            properties:
              detail:
                example: Rate limit exceeded. Please retry after some time.
                type: string
              status:
                example: "429"
                type: string
              title:
                example: Too Many Requests
                type: string
            type: object
          type: array
        meta:
          properties:
            rate_limit:
              properties:
                limit:
                  description: The maximum number of requests allowed
                  type: integer
                remaining:
                  description: The number of requests remaining in the current window
                  type: integer
                reset:
                  description: Unix timestamp when the rate limit window resets
                  type: integer
              type: object
          type: object
      type: object
    RegisterOtpOnUserAccountRequestObject:
      description: |-
        Request schema for the 'Register Mobile Number' action. This action operates on user_account instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 1 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        mobile_number: "+1234567890"
        user_account_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        mobile_number:
          description: |-
            Mobile number for receiving OTP codes via SMS. Format requirements:
            - Include country code (e.g., +1 for US, +44 for UK)
            - No spaces or special characters except leading +
            - Must be a valid mobile number (not landline)

            Examples: "+12125551234", "+447700900123"
          type: string
        user_account_id:
          description: Reference ID of the user_account instance on which to execute
            this action. This must be a valid UUID of an existing user_account record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - mobile_number
      - user_account_id
      type: object
    RelatedStructure:
      properties:
        id:
          description: Id of the object
          type: string
        type:
          description: Type of the included object
          type: string
      type: object
    RemoveColumnOnWorldRequestObject:
      description: |-
        Request schema for the 'Delete column' action. This action operates on world instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 1 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        column_name: deprecated_field
        world_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        column_name:
          description: |-
            ⚠️ DESTRUCTIVE: The exact name of the column to permanently delete.

            **WARNING**: This will:
            - Delete ALL data in the column
            - Remove column from schema
            - Break any dependent views/queries
            - Cannot be undone!

            System columns (id, created_at, etc.) cannot be removed.
          type: string
        world_id:
          description: Reference ID of the world instance on which to execute this
            action. This must be a valid UUID of an existing world record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - column_name
      - world_id
      type: object
    RemoveTableOnWorldRequestObject:
      description: |-
        Request schema for the 'Delete table' action. This action requires only the reference ID of the world instance on which to execute it.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes - must specify a valid world_id
        **Permissions:** Execute permission on the instance
      example:
        world_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        world_id:
          description: Reference ID of the world instance on which to execute this
            action. This must be a valid UUID of an existing world record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - world_id
      type: object
    RenameColumnOnWorldRequestObject:
      description: |-
        Request schema for the 'Rename column' action. This action operates on world instances and requires 3 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** No
        **Required Fields:** 3 of 3 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        column_name: product_desc
        new_column_name: product_description
        table_name: products
      properties:
        column_name:
          description: |-
            Current name of the column. Must exactly match the existing column name (case-sensitive).

            Example: "prod_desc", "customerEmail"
          type: string
        new_column_name:
          description: |-
            New name for the column. Requirements:
            - Cannot be a reserved SQL keyword
            - Must be unique within the table
            - Spaces will be converted to underscores
            - Should follow naming conventions (lowercase, underscores)

            Examples: "product_description", "customer_email_address"
          type: string
        table_name:
          description: |-
            The table containing the column to rename. Must be an existing table that you have permission to modify.

            Example: "products", "customer_data"
          type: string
      required:
      - table_name
      - column_name
      - new_column_name
      type: object
    ResetPasswordOnUserAccountRequestObject:
      description: |-
        Request schema for the 'Reset password' action. This action operates on user_account instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Not required (public endpoint)
        **Instance Required:** No
        **Required Fields:** 1 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        email: user@example.com
      properties:
        email:
          description: |-
            Email address of the account to reset:
            - Must be registered
            - Receives reset code
            - Case-insensitive

            Reset email sent if account exists.
          example: user@example.com
          format: email
          type: string
      required:
      - email
      type: object
    ResetPasswordVerifyOnUserAccountRequestObject:
      description: |-
        Request schema for the 'Reset password verify code' action. This action operates on user_account instances and requires 2 input parameter(s) to execute successfully.

        **Authentication:** Not required (public endpoint)
        **Instance Required:** No
        **Required Fields:** 2 of 2 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        email: user@example.com
        otp: example_value
      properties:
        email:
          description: |-
            Email address requesting reset:
            - Must match reset request
            - Case-insensitive
          example: user@example.com
          format: email
          type: string
        otp:
          type: string
      required:
      - email
      - otp
      type: object
    RestartDaptinOnWorldRequestObject:
      description: |-
        Request schema for the 'Restart system' action. This action requires no input parameters and can be executed without specifying an instance.

        **Authentication:** Required (Bearer token)
        **Rate Limiting:** Standard API rate limits apply
        **Idempotent:** No - May have side effects
      example: {}
      properties: {}
      type: object
    SendOtpOnUserOtpAccountRequestObject:
      description: |-
        Request schema for the 'Send OTP to mobile' action. This action operates on user_otp_account instances and requires 2 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** No
        **Required Fields:** 2 of 2 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        email: example email
        mobile_number: example mobile_number
      properties:
        email:
          type: string
        mobile_number:
          type: string
      required:
      - mobile_number
      - email
      type: object
    SigninOnUserAccountRequestObject:
      description: |-
        Request schema for the 'Sign in' action. This action operates on user_account instances and requires 2 input parameter(s) to execute successfully.

        **Authentication:** Not required (public endpoint)
        **Instance Required:** No
        **Required Fields:** 2 of 2 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        email: john.doe@example.com
        password: SecurePass123!
      properties:
        email:
          description: |-
            Registered email address:
            - Case-insensitive
            - Primary account identifier
            - Must be verified (if enabled)

            Example: "user@example.com"
          example: user@example.com
          format: email
          type: string
        password:
          description: |-
            Account password:
            - Case-sensitive
            - No minimum length for signin
            - Rate limited after failures
            - Account locked after 5 failures
          format: password
          type: string
          writeOnly: true
      required:
      - email
      - password
      type: object
    SignupOnUserAccountRequestObject:
      description: |-
        Request schema for the 'Sign up' action. This action operates on user_account instances and requires 5 input parameter(s) to execute successfully.

        **Authentication:** Not required (public endpoint)
        **Instance Required:** No
        **Required Fields:** 4 of 5 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        email: john.doe@example.com
        mobile: "+1234567890"
        name: John Doe
        password: SecurePass123!
        passwordConfirm: SecurePass123!
      properties:
        email:
          description: |-
            Primary email address:
            - Used for login
            - Must be unique in system
            - Receives notifications
            - Case-insensitive
            - Valid email format required

            Example: "user@example.com"
          example: user@example.com
          format: email
          type: string
        mobile:
          description: "Mobile number for SMS/OTP features:\n\n**⚠️ IMPORTANT**: Only
            include if you have SMS/OTP configured!\n- Will trigger OTP generation
            on signup\n- Fails with \"Decoding of secret as base32 failed\" if OTP
            not set up\n- RECOMMENDED: Leave empty for initial setup\n\n**Format if
            used:**\n- Include country code: \"+1234567890\"\n- No spaces or special
            characters\n- Will be trimmed automatically\n\n**When to use:**\n- After
            configuring SMS provider (Twilio, etc.)\n- When two-factor auth is required\n-
            For account recovery options"
          nullable: true
          type: string
        name:
          description: "User's full name for display:\n- Used in emails and UI\n-
            Can contain spaces\n- Unicode characters supported\n- 2-100 characters\n\nExamples:
            \"John Doe\", \"María García\""
          type: string
        password:
          description: |-
            Account password requirements:
            - Minimum 8 characters
            - Recommended: 12+ characters
            - Mix of letters, numbers, symbols
            - Not same as email
            - Stored using bcrypt hashing
          format: password
          type: string
          writeOnly: true
        passwordConfirm:
          description: |-
            Confirm password:
            - Must exactly match password field
            - Case-sensitive
            - Prevents typos
            - Required for signup
          format: password
          type: string
          writeOnly: true
      required:
      - name
      - email
      - password
      - passwordConfirm
      type: object
    Site:
      example:
        created_at: 2024-01-15T09:30:00Z
        enable: true
        ftp_enabled: true
        hostname: example hostname
        name: example name
        path: example path
        reference_id: example reference_id
        site_type: example site_type
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        enable:
          default: "true"
          type: boolean
        ftp_enabled:
          default: "false"
          type: boolean
        hostname:
          type: string
        name:
          type: string
        path:
          description: path on the cloud store to host as base directory
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        site_type:
          default: '''static'''
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - hostname
      - path
      - enable
      - ftp_enabled
      - site_type
      type: object
    Smd:
      example:
        created_at: 2024-01-15T09:30:00Z
        events: example events
        initial_state: example initial_state
        label: example label
        name: example name
        reference_id: example reference_id
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        events:
          type: string
        initial_state:
          type: string
        label:
          type: string
        name:
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - label
      - initial_state
      - events
      type: object
    Stream:
      example:
        created_at: 2024-01-15T09:30:00Z
        enable: true
        reference_id: example reference_id
        stream_contract: example stream_contract
        stream_name: example stream_name
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        enable:
          default: "true"
          type: boolean
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        stream_contract:
          type: string
        stream_name:
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - stream_name
      - enable
      - stream_contract
      type: object
    SyncColumnStorageOnWorldRequestObject:
      description: |-
        Request schema for the 'Sync column storage' action. This action operates on world instances and requires 3 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** No
        **Required Fields:** 3 of 3 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        column_name: example column_name
        credential_name: example credential_name
        table_name: example table_name
      properties:
        column_name:
          type: string
        credential_name:
          type: string
        table_name:
          type: string
      required:
      - table_name
      - column_name
      - credential_name
      type: object
    SyncMailServersOnMailServerRequestObject:
      description: |-
        Request schema for the 'Sync Mail Servers' action. This action requires no input parameters and can be executed without specifying an instance.

        **Authentication:** Required (Bearer token)
        **Rate Limiting:** Standard API rate limits apply
        **Idempotent:** No - May have side effects
      example: {}
      properties: {}
      type: object
    SyncSiteStorageOnSiteRequestObject:
      description: |-
        Request schema for the 'Sync site storage' action. This action operates on site instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 1 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        path: example path
        site_id: 550e8400-e29b-41d4-a716-446655440000
      properties:
        path:
          description: |-
            Directory path to synchronize with cloud storage. Options:
            - "/" - Sync entire site (may be slow)
            - "/assets" - Sync only assets directory
            - "/uploads/2024" - Sync specific subdirectory

            Path must exist in the site structure.
          type: string
        site_id:
          description: Reference ID of the site instance on which to execute this
            action. This must be a valid UUID of an existing site record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
      required:
      - path
      - site_id
      type: object
    Task:
      example:
        action_name: example action_name
        active: true
        attributes: example attributes
        created_at: 2024-01-15T09:30:00Z
        entity_name: example entity_name
        job_type: example job_type
        name: example name
        reference_id: example reference_id
        schedule: example schedule
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        action_name:
          description: The name of the action to be executed when this task runs.
            References an action defined in the system that contains the implementation
            logic.
          type: string
        active:
          description: Indicates whether the task is currently active and should be
            executed according to its schedule. Inactive tasks are not run regardless
            of their schedule.
          type: boolean
        attributes:
          description: A JSON object containing additional parameters, settings, and
            configuration options specific to this task. These attributes are passed
            to the action when executed.
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        entity_name:
          description: The name of the data entity or resource type that this task
            operates on. This determines the context and scope of the task's execution.
          type: string
        job_type:
          description: Categorizes the task by type of job (e.g., 'backup', 'sync',
            'report', 'maintenance'), allowing for filtering and grouping related
            tasks.
          type: string
        name:
          description: A descriptive name for the task that serves as the primary
            user-facing identifier. This field is indexed to support efficient searching
            and sorting of tasks.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        schedule:
          description: The execution schedule for the task, typically defined as a
            cron expression or time interval pattern. Controls when and how frequently
            the task runs.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - action_name
      - entity_name
      - schedule
      - active
      - attributes
      - job_type
      type: object
    Template:
      example:
        action_config: example action_config
        cache_config: example cache_config
        content: example content
        created_at: 2024-01-15T09:30:00Z
        headers: example headers
        mime_type: example mime_type
        name: example name
        reference_id: example reference_id
        updated_at: 2024-01-15T09:30:00Z
        url_pattern: example url_pattern
        version: 42
      properties:
        action_config:
          default: '''{}'''
          description: JSON configuration for actions that can be performed on or
            with this template, such as pre-processing, post-processing, or conditional
            rendering logic.
          nullable: true
          type: string
        cache_config:
          default: '''{}'''
          description: JSON configuration for caching behavior, including cache duration,
            invalidation rules, and cache storage options to optimize performance.
          nullable: true
          type: string
        content:
          description: The actual template content, which may include HTML, text with
            placeholders, or template language syntax that will be processed when
            the template is rendered.
          type: string
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        headers:
          description: JSON object containing additional HTTP headers to be included
            when serving content generated from this template. Used for custom headers
            beyond content type.
          nullable: true
          type: string
        mime_type:
          description: The MIME type of the content this template generates, such
            as 'text/html', 'application/json', or 'text/plain'. Used for HTTP response
            headers.
          type: string
        name:
          description: A unique identifier for the template that serves as the primary
            reference key. Used in code, URLs, and API calls to identify specific
            templates.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        url_pattern:
          description: JSON definition of URL patterns that map to this template,
            enabling dynamic routing and parameter extraction from request URLs.
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - content
      - mime_type
      - url_pattern
      type: object
    Timeline:
      example:
        created_at: 2024-01-15T09:30:00Z
        event_type: example event_type
        payload: example payload
        reference_id: example reference_id
        title: example title
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        event_type:
          description: Categorizes the timeline event by type (e.g., 'create', 'update',
            'delete', 'login'), allowing for filtering and grouping related events
            in chronological sequences.
          type: string
        payload:
          description: Additional data or context related to the event, stored as
            text content. May contain JSON, XML, or plaintext details that provide
            comprehensive information about what occurred.
          nullable: true
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        title:
          description: A concise summary of the event displayed to users when viewing
            the timeline. This field is indexed to enable efficient timeline searches
            and filtering by event title.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - event_type
      - title
      type: object
    UploadCsvToSystemSchemaOnWorldRequestObject:
      description: |-
        Request schema for the 'Upload CSV to entity' action. This action operates on world instances and requires 4 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** No
        **Required Fields:** 2 of 4 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        add_missing_columns: true
        create_if_not_exists: true
        data_csv_file: example_value
        entity_name: example entity_name
      properties:
        add_missing_columns:
          default: "false"
          nullable: true
          type: boolean
        create_if_not_exists:
          default: "false"
          nullable: true
          type: boolean
        data_csv_file:
          type: string
        entity_name:
          type: string
      required:
      - data_csv_file
      - entity_name
      type: object
    UploadFileOnCloudStoreRequestObject:
      description: |-
        Request schema for the 'Upload file to external store' action. This action operates on cloud_store instances and requires 2 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** Yes
        **Required Fields:** 1 of 2 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        cloud_store_id: 550e8400-e29b-41d4-a716-446655440000
        file: example_value
        path: example path
      properties:
        cloud_store_id:
          description: Reference ID of the cloud_store instance on which to execute
            this action. This must be a valid UUID of an existing cloud_store record.
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        file:
          description: |-
            File to upload (multipart/form-data). Specifications:
            - Maximum size: Set by cloud provider (typically 5GB)
            - Any file type supported
            - Automatic MIME type detection
            - Virus scanning if configured

            Large files may take significant time.
          type: string
        path:
          description: |-
            Destination path in cloud storage:
            - Leave empty for root directory
            - Must not start with /
            - Creates directories if needed
            - Overwrites existing files

            Examples: "documents/2024/", "images/profile/"
          nullable: true
          type: string
      required:
      - file
      - cloud_store_id
      type: object
    UploadSystemSchemaOnWorldRequestObject:
      description: |-
        Request schema for the 'Upload features' action. This action operates on world instances and requires 1 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** No
        **Required Fields:** 1 of 1 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        schema_file: example_value
      properties:
        schema_file:
          type: string
      required:
      - schema_file
      type: object
    UploadXlsToSystemSchemaOnWorldRequestObject:
      description: |-
        Request schema for the 'Upload xls to entity' action. This action operates on world instances and requires 4 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** No
        **Required Fields:** 4 of 4 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        add_missing_columns: true
        create_if_not_exists: true
        data_xls_file: example_value
        entity_name: example entity_name
      properties:
        add_missing_columns:
          type: boolean
        create_if_not_exists:
          type: boolean
        data_xls_file:
          type: string
        entity_name:
          type: string
      required:
      - data_xls_file
      - entity_name
      - create_if_not_exists
      - add_missing_columns
      type: object
    UserAccount:
      example:
        confirmed: true
        created_at: 2024-01-15T09:30:00Z
        email: user@example.com
        name: example name
        password: example password
        reference_id: example reference_id
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        confirmed:
          default: "false"
          description: Indicates whether the user has confirmed their account, typically
            through email verification. Defaults to false until the confirmation process
            is completed.
          type: boolean
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        email:
          description: The primary email address of the user, serving as a unique
            identifier for authentication and communication. This field is indexed
            and must be unique across all users.
          example: user@example.com
          format: email
          type: string
        name:
          description: The display name of the user, used for identification in the
            UI and communications. This field is indexed to support quick user lookups
            and searching by name.
          type: string
        password:
          description: The user's password stored in a secure hashed format. This
            field is nullable to support alternative authentication methods like OAuth
            or OTP.
          format: password
          nullable: true
          type: string
          writeOnly: true
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      - email
      - confirmed
      type: object
    UserOtpAccount:
      example:
        created_at: 2024-01-15T09:30:00Z
        mobile_number: example mobile_number
        otp_secret: example otp_secret
        reference_id: example reference_id
        updated_at: 2024-01-15T09:30:00Z
        verified: true
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        mobile_number:
          description: The user's mobile phone number used for receiving OTP (One-Time
            Password) messages. This field is indexed to enable quick lookups for
            verification and authentication processes.
          nullable: true
          type: string
        otp_secret:
          description: The encrypted secret key used to generate OTP (One-Time Password)
            codes for this account. This sensitive field is indexed for authentication
            lookups but excluded from API responses.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        verified:
          default: "false"
          description: Indicates whether the user's OTP account has been successfully
            verified through a validation process. Defaults to false until verification
            is completed.
          type: boolean
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - otp_secret
      - verified
      type: object
    Usergroup:
      example:
        created_at: 2024-01-15T09:30:00Z
        name: example name
        reference_id: example reference_id
        updated_at: 2024-01-15T09:30:00Z
        version: 42
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        name:
          description: A unique identifier for the user group that serves as the primary
            reference key. This indexed field ensures groups have distinct names for
            clear identification in permission assignments and user management.
          type: string
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
      required:
      - name
      type: object
    VerifyMobileNumberOnUserOtpAccountRequestObject:
      description: |-
        Request schema for the 'Verify Mobile Number' action. This action operates on user_otp_account instances and requires 3 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** No
        **Required Fields:** 3 of 3 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        email: example email
        mobile_number: example mobile_number
        otp: example otp
      properties:
        email:
          type: string
        mobile_number:
          type: string
        otp:
          type: string
      required:
      - mobile_number
      - email
      - otp
      type: object
    VerifyOtpOnUserAccountRequestObject:
      description: |-
        Request schema for the 'Login with OTP' action. This action operates on user_account instances and requires 3 input parameter(s) to execute successfully.

        **Authentication:** Required (Bearer token)
        **Instance Required:** No
        **Required Fields:** 3 of 3 fields are mandatory
        **Validation:** Input fields are validated before execution
      example:
        email: user@example.com
        mobile_number: "+1234567890"
        otp: "123456"
      properties:
        email:
          description: |-
            Email address associated with the user account. Required for:
            - Account verification
            - Matching user identity
            - Audit trail

            Must be the primary email on the account.
          type: string
        mobile_number:
          description: |-
            The mobile number where the OTP was sent. Must exactly match the registered number including country code.

            Example: "+12125551234"
          type: string
        otp:
          description: |-
            The one-time password code received via SMS or email. Typically:
            - 6 digits for SMS codes
            - 8 characters for email codes
            - Case-sensitive if alphanumeric
            - Valid for 5 minutes from generation

            Example: "123456"
          type: string
      required:
      - otp
      - mobile_number
      - email
      type: object
    World:
      example:
        created_at: 2024-01-15T09:30:00Z
        default_order: example default_order
        default_permission: example default_permission
        icon: example icon
        is_hidden: true
        is_join_table: true
        is_state_tracking_enabled: true
        is_top_level: true
        reference_id: example reference_id
        table_name: example table_name
        updated_at: 2024-01-15T09:30:00Z
        version: 42
        world_schema_json: example world_schema_json
      properties:
        created_at:
          default: current_timestamp
          description: Timestamp recording when the record was initially created in
            the database. Automatically set to the current time upon record creation
            and indexed for efficient temporal queries.
          example: 2024-01-15T09:30:00Z
          format: date-time
          type: string
        default_order:
          default: '''+id'''
          description: A string defining the default sorting order for records in
            this table. Uses a format like '+column' for ascending or '-column' for
            descending sort, defaulting to '+id'.
          nullable: true
          type: string
        default_permission:
          default: "644"
          description: An integer representing the default Unix-style permission setting
            (e.g., 644) that controls the base access rights for records in this table
            for various user roles.
          type: string
        icon:
          default: '''fa-star'''
          description: The Font Awesome icon identifier used to represent this entity
            in the user interface. Provides visual identification of entity types
            in lists and navigation elements.
          nullable: true
          type: string
        is_hidden:
          default: "false"
          description: Controls the visibility of this entity in user interfaces and
            API documentation. When set to true, the entity exists but is not displayed
            in standard listings.
          type: boolean
        is_join_table:
          default: "false"
          description: Specifies whether this table serves as a many-to-many join
            table between other entities. Join tables typically contain primarily
            foreign key references to related entities.
          type: boolean
        is_state_tracking_enabled:
          default: "false"
          description: Determines whether state transitions for records in this table
            are tracked and logged. When enabled, the system maintains a history of
            status changes over time.
          type: boolean
        is_top_level:
          default: "true"
          description: Indicates whether this entity appears at the top level of the
            data hierarchy in the system. Top-level entities are directly accessible
            via API endpoints and user interfaces.
          type: boolean
        reference_id:
          description: A unique external identifier stored as a blob that allows referencing
            the record from outside systems. This non-nullable field serves as a public-facing
            alias for the internal ID and is indexed for quick lookups.
          type: string
        table_name:
          description: The name of the database table this world entity represents.
            This is a unique, indexed identifier used throughout the system to reference
            specific data models.
          type: string
        updated_at:
          description: Timestamp indicating when the record was last modified. This
            non-nullable field is indexed to enable efficient filtering and sorting
            of records by modification time.
          example: 2024-01-15T09:30:00Z
          format: date-time
          nullable: true
          type: string
        version:
          default: "1"
          description: A counter that tracks the number of modifications made to a
            record. Starting at 1 for new records, this integer increments with each
            update to support optimistic concurrency control and change tracking.
            Exposed through the API.
          type: number
        world_schema_json:
          description: A JSON representation of the complete schema for this world
            entity, including all columns, relationships, validations, and other metadata
            needed to define the data model.
          type: string
      required:
      - table_name
      - world_schema_json
      - default_permission
      - is_top_level
      - is_hidden
      - is_join_table
      - is_state_tracking_enabled
      type: object
  securitySchemes:
    basicAuth:
      description: Basic authentication using email and password
      scheme: basic
      type: http
    bearerAuth:
      bearerFormat: JWT
      description: |-
        JWT Bearer token authentication. Obtain tokens via POST /auth/signin.

        Permission model:
        - **Guest**: Basic read permissions (GuestPeek, GuestRead)
        - **User**: Full CRUD on owned resources (UserCRUD)
        - **Group**: Shared permissions within groups (GroupCRUD)
        - **Execute**: Permission to run actions

        Example: Authorization: Bearer <your-jwt-token>
      scheme: bearer
      type: http
security:
- bearerAuth: []
externalDocs:
  description: Full Daptin Documentation
  url: https://docs.dapt.in
tags:
- description: Authentication endpoints for obtaining JWT tokens
  name: Authentication
- description: |-
    Core system administration actions that affect the entire Daptin instance.

    **Key Actions:**
    - restart_daptin - Gracefully restart the system
    - become_an_administrator - Elevate user privileges
    - download_system_schema - Export complete configuration
    - upload_system_schema - Import configuration changes
  name: System Actions
  x-displayName: System Actions
- description: |-
    Actions for bulk data manipulation, import/export, and data generation.

    **Import/Export:**
    - export_data - Export in multiple formats (JSON, CSV, XML, etc.)
    - import_data - Import from various file formats
    - export_csv_data - Quick CSV export

    **Data Generation:**
    - generate_random_data - Create test data
    - upload_csv_to_system_schema - Import CSV with schema detection
    - upload_xls_to_system_schema - Import Excel with schema detection
  name: Data Operations
  x-displayName: Data Operations
- description: "Database schema modification actions. ⚠️ Use with caution - these
    are destructive operations!\n\n**Column Operations:**\n- rename_column - Safely
    rename columns\n- remove_column - ⚠️ Permanently delete columns\n\n**Table Operations:**\n-
    remove_table - ⚠️ Permanently delete tables\n- World table actions for schema
    updates"
  name: Schema Management
  x-displayName: Schema Management
- description: |-
    Cloud storage and file management actions supporting multiple providers (AWS S3, GCS, Azure).

    **File Operations:**
    - upload_file - Upload to cloud storage
    - list_files - Browse directories
    - get_file - Download files
    - delete_file - Remove files
    - move_path - Rename/move files

    **Sync Operations:**
    - sync_site_storage - Sync site content
    - sync_column_storage - Sync file columns
    - import_files_from_store - Import file metadata
  name: Storage Management
  x-displayName: Storage Management
- description: |-
    SSL/TLS certificate generation and management for secure HTTPS connections.

    **Certificate Types:**
    - generate_acme_certificate - Let's Encrypt certificates (free, trusted)
    - generate_self_certificate - Self-signed certificates (development)

    **Certificate Operations:**
    - download_certificate - Export certificates
    - download_public_key - Export public keys
  name: Certificate Management
  x-displayName: Certificate Management
- description: |-
    User account lifecycle management and authentication actions.

    **Account Creation:**
    - signup - Register new account
    - signin - Authenticate user

    **Authentication Methods:**
    - register_otp - Setup SMS/OTP authentication
    - verify_otp - Verify OTP codes
    - oauth_login_begin - Start OAuth flow
    - oauth.login.response - Complete OAuth

    **Account Recovery:**
    - reset-password - Request password reset
    - reset-password-verify - Complete reset
  name: User Management
  x-displayName: User Management
- name: document
- name: calendar
- name: collection
- name: credential
- name: certificate
- name: feed
- name: integration
- name: task
- name: template
- name: json_schema
- name: timeline
- name: world
- name: stream
- name: user_otp_account
- name: user_account
- name: usergroup
- name: action
- name: smd
- name: oauth_connect
- name: data_exchange
- name: oauth_token
- name: cloud_store
- name: site
- name: mail_server
- name: mail_account
- name: mail_box
- name: mail
- name: outbox
